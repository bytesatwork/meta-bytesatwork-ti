From 510dfe5bc57307f690f58a58aa9fd02dec682378 Mon Sep 17 00:00:00 2001
From: Rico Ganahl <rico.ganahl@bytesatwork.ch>
Date: Mon, 18 Jul 2022 06:52:40 +0200
Subject: [PATCH] board: bytesatwork: introduce byteDEVKIT

Introduce bytes at work AM625 module on byteDEVKIT.

Signed-off-by: Rico Ganahl <rico.ganahl@bytesatwork.ch>
---
 MAINTAINERS                                   |   1 +
 board/bytesatwork/bytedevkit/Kconfig          |  65 +++++---
 board/bytesatwork/bytedevkit/Makefile         |   9 +-
 board/bytesatwork/bytedevkit/README.md        | 154 ++++++++++++++++++
 .../bytesatwork/bytedevkit/am62x_bytedevkit.c | 106 +-----------
 5 files changed, 204 insertions(+), 131 deletions(-)
 create mode 100644 board/bytesatwork/bytedevkit/README.md

diff --git a/MAINTAINERS b/MAINTAINERS
index 4071d71c02..157d54dd73 100644
--- a/MAINTAINERS
+++ b/MAINTAINERS
@@ -194,6 +194,7 @@ S:	Maintained
 F:	arch/arm/dts/k3-am62*bytedevkit*
 F:	arch/arm/dts/k3-am62*byteengine*
 F:	board/bytesatwork/
+F:	board/bytesatwork/bytedevkit/
 F:	configs/*bytedevkit*_defconfig
 F:	include/configs/*bytedevkit*.h
 
diff --git a/board/bytesatwork/bytedevkit/Kconfig b/board/bytesatwork/bytedevkit/Kconfig
index 95eec27170..534249f63a 100644
--- a/board/bytesatwork/bytedevkit/Kconfig
+++ b/board/bytesatwork/bytedevkit/Kconfig
@@ -1,22 +1,24 @@
 # SPDX-License-Identifier: GPL-2.0+
 #
+# Copyright (C) 2022 bytes at work AG - https://www.bytesatwork.io
+#
+# Based on ti/am62x/Kconfig
 # Copyright (C) 2020-2022 Texas Instruments Incorporated - https://www.ti.com/
 #	Suman Anna <s-anna@ti.com>
 
 choice
-	prompt "TI K3 AM62x based boards"
+	prompt "bytes at work TI AM62x based boards"
 	optional
 
-config TARGET_AM625_A53_EVM
-	bool "TI K3 based AM625 EVM running on A53"
+config TARGET_AM62X_BYTEDEVKIT_A53
+	bool "byteENGINE-AM62x on byteDEVKIT running on A53"
 	select ARM64
 	select SOC_K3_AM625
 	imply BOARD
 	imply SPL_BOARD
-	imply TI_I2C_BOARD_DETECT
 
-config TARGET_AM625_R5_EVM
-	bool "TI K3 based AM625 EVM running on R5"
+config TARGET_AM62X_BYTEDEVKIT_R5
+	bool "byteENGINE-AM62x on byteDEVKIT running on R5"
 	select CPU_V7R
 	select SYS_THUMB_BUILD
 	select K3_LOAD_SYSFW
@@ -25,39 +27,52 @@ config TARGET_AM625_R5_EVM
 	select SPL_RAM
 	select K3_DDRSS
 	imply SYS_K3_SPL_ATF
-	imply TI_I2C_BOARD_DETECT
 
 endchoice
 
-if TARGET_AM625_A53_EVM
+if TARGET_AM62X_BYTEDEVKIT_A53 || TARGET_AM62X_BYTEDEVKIT_R5
 
 config SYS_BOARD
-       default "am62x"
+	default "bytedevkit"
 
 config SYS_VENDOR
-       default "ti"
+	default "bytesatwork"
 
 config SYS_CONFIG_NAME
-       default "am62x_evm"
-
-source "board/ti/common/Kconfig"
+	default "am62x_bytedevkit"
+
+config BAW_COMMON_CMD_OPTIONS
+	bool "Enable bytesatwork cmd options"
+	imply CMD_ASKENV
+	imply CRC32_VERIFY if ARCH_KEYSTONE
+	imply CMD_DFU if USB_GADGET_DOWNLOAD
+	imply CMD_DHCP
+	imply CMD_EEPROM
+	imply CMD_EXT2
+	imply CMD_EXT4
+	imply CMD_EXT4_WRITE
+	imply CMD_FAT
+	imply FAT_WRITE if CMD_FAT
+	imply CMD_FS_GENERIC
+	imply CMD_GPIO
+	imply CMD_GPT
+	imply CMD_I2C
+	imply CMD_MII
+	imply CMD_MMC
+	imply CMD_PART
+	imply CMD_PING
+	imply CMD_PMIC if DM_PMIC
+	imply CMD_REGULATOR if DM_REGULATOR
+	imply CMD_SF if SPI_FLASH
+	imply CMD_SPI
+	imply CMD_TIME
+	imply CMD_USB if USB
 
 endif
 
-if TARGET_AM625_R5_EVM
-
-config SYS_BOARD
-       default "am62x"
-
-config SYS_VENDOR
-       default "ti"
-
-config SYS_CONFIG_NAME
-       default "am62x_evm"
+if TARGET_AM62X_BYTEDEVKIT_R5
 
 config SPL_LDSCRIPT
 	default "arch/arm/mach-omap2/u-boot-spl.lds"
 
-source "board/ti/common/Kconfig"
-
 endif
diff --git a/board/bytesatwork/bytedevkit/Makefile b/board/bytesatwork/bytedevkit/Makefile
index f4c35edffa..0ea7ec7e64 100644
--- a/board/bytesatwork/bytedevkit/Makefile
+++ b/board/bytesatwork/bytedevkit/Makefile
@@ -1,8 +1,9 @@
+# SPDX-License-Identifier: GPL-2.0+
 #
+# Copyright (C) 2022 bytes at work AG - https://www.bytesatwork.io
+#
+# Based on ti/am62x/Makefile
 # Copyright (C) 2020-2022 Texas Instruments Incorporated - https://www.ti.com/
 #	Suman Anna <s-anna@ti.com>
-#
-# SPDX-License-Identifier:     GPL-2.0+
-#
 
-obj-y	+= evm.o
+obj-y	+= am62x_bytedevkit.o
diff --git a/board/bytesatwork/bytedevkit/README.md b/board/bytesatwork/bytedevkit/README.md
new file mode 100644
index 0000000000..4ab143577f
--- /dev/null
+++ b/board/bytesatwork/bytedevkit/README.md
@@ -0,0 +1,154 @@
+# Bytes at work byteENGINE AM625 on byteDEVKIT
+
+This file describes how to build u-boot for the byteENGINE AM625 module mounted
+on the byteDEVKIT.
+
+## Install Dependencies
+
+Cross toolchain:
+
+```bash
+sudo apt install gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf
+```
+
+## ti-linux-firmware
+
+### Download TI Firmware
+
+```bash
+git clone https://git.ti.com/git/processor-firmware/ti-linux-firmware.git
+cd ti-linux-firmware
+git checkout 08.04.01.005
+```
+
+## arm-trusted-firmware
+
+### Download TF-A
+
+```bash
+git clone https://git.ti.com/git/atf/arm-trusted-firmware.git
+cd arm-trusted-firmware
+git checkout 08.04.00.002
+```
+
+### Build TF-A
+
+```bash
+make CROSS_COMPILE=aarch64-linux-gnu- PLAT=k3 TARGET_BOARD=lite SPD=opteed all
+```
+
+## optee-os
+
+### Download OP-TEE Trusted OS
+
+```bash
+git clone https://git.ti.com/git/optee/ti-optee-os.git
+cd ti-optee-os
+git checkout 08.04.00.002
+```
+
+### Build OP-TEE OS
+
+```bash
+make ARCH=arm CROSS_COMPILE64=aarch64-linux-gnu- PLATFORM=k3-j721e CFG_ARM64_core=y all
+```
+
+**NOTE:** On fail check for missing python dependencies, e.g. `python3-pycryptodome`.
+
+## u-boot
+
+### Download bytes at work u-boot
+
+```bash
+git clone https://github.com/bytesatwork/u-boot-ti.git ti-u-boot
+cd ti-u-boot
+git checkout baw-ti-u-boot-2021.01
+```
+
+### Build u-boot for R5
+
+```bash
+make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- am62x_bytedevkit_r5_defconfig O=build-r5
+make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- O=build-r5 -j`nproc`
+```
+
+**NOTE:** Clean command: `make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- O=build-r5 distclean`
+
+### Build u-boot for A53
+
+You should have downloaded [TI Firmware](#download-ti-firmware) and built
+[TF-A](#build-tf-a), [optee-os](#build-op-tee-os) already.
+Commands imply [folder structure](#folder-structure).
+
+```bash
+make ARCH=arm CROSS_COMPILE=aarch64-linux-gnu- am62x_bytedevkit_a53_defconfig O=build-a53
+make ARCH=arm CROSS_COMPILE=aarch64-linux-gnu- \
+ATF=`pwd`/../arm-trusted-firmware/build/k3/lite/release/bl31.bin \
+TEE=`pwd`/../ti-optee-os/out/arm-plat-k3/core/tee-pager_v2.bin \
+DM=`pwd`/../ti-linux-firmware/ti-dm/am62xx/ipc_echo_testb_mcu1_0_release_strip.xer5f \
+O=build-a53 -j`nproc`
+```
+
+**NOTE:** Clean command: `make ARCH=arm CROSS_COMPILE=aarch64-linux-gnu- O=build-a53 distclean`
+
+## k3-image-gen
+
+### Download System Firmware Image Generator
+
+```bash
+git clone https://git.ti.com/git/k3-image-gen/k3-image-gen.git
+cd k3-image-gen
+git checkout 08.04.01.005
+```
+
+### Build tiboot3.bin
+
+You should have downloaded [TI Firmware](#download-ti-firmware) and built
+[u-boot for R5](#build-u-boot-for-r5) already.
+Command imply [folder structure](#folder-structure).
+
+```bash
+make ARCH=arm CROSS_COMPILE=aarch64-linux-gnu- \
+SYSFW_PATH=`pwd`/../ti-linux-firmware/ti-sysfw/ti-fs-firmware-am62x-gp.bin \
+SOC=am62x SBL=`pwd`/../ti-u-boot/build-r5/spl/u-boot-spl.bin
+```
+
+**NOTE:** Clean command: `make ARCH=arm CROSS_COMPILE=aarch64-linux-gnu- clean`
+
+## Result
+
+### Copy Files to SD
+
+```bash
+cp -vp k3-image-gen/tiboot3.bin <path-to-SD-boot-partition>/
+cp -vp ti-u-boot/build-a53/tispl.bin <path-to-SD-boot-partition>/
+cp -vp ti-u-boot/build-a53/u-boot.img <path-to-SD-boot-partition>/
+```
+
+### Folder Structure
+
+```txt
+.
+├── arm-trusted-firmware
+├── k3-image-gen
+├── ti-linux-firmware
+├── ti-optee-os
+└── ti-u-boot
+```
+
+## Prepare SPI boot
+
+Program the `tiboot3.bin`, `tispl.bin` and `u-boot.img` from the SD card to the
+SPI flash.
+
+```log
+=> sf probe
+=> fatload mmc 1 ${loadaddr} tiboot3.bin
+=> sf update $loadaddr 0x0 $filesize
+=> fatload mmc 1 ${loadaddr} tispl.bin
+=> sf update $loadaddr 0x80000 $filesize
+=> fatload mmc 1 ${loadaddr} u-boot.img
+=> sf update $loadaddr 0x280000 $filesize
+```
+
+**NOTE:** Force SPI boot with the BOOT MODE DIP switches on the byteDEVKIT.
diff --git a/board/bytesatwork/bytedevkit/am62x_bytedevkit.c b/board/bytesatwork/bytedevkit/am62x_bytedevkit.c
index 449fa53cf6..857c15ffe3 100644
--- a/board/bytesatwork/bytedevkit/am62x_bytedevkit.c
+++ b/board/bytesatwork/bytedevkit/am62x_bytedevkit.c
@@ -1,7 +1,8 @@
 // SPDX-License-Identifier: GPL-2.0+
 /*
- * Board specific initialization for AM62x platforms
+ * Copyright (C) 2022 bytes at work AG - https://www.bytesatwork.io
  *
+ * Based on ti/am62x/evm.c
  * Copyright (C) 2020-2022 Texas Instruments Incorporated - https://www.ti.com/
  *	Suman Anna <s-anna@ti.com>
  *
@@ -17,11 +18,6 @@
 #include <asm/arch/sys_proto.h>
 #include <env.h>
 
-#include "../common/board_detect.h"
-
-#define board_is_am62x_skevm()		board_ti_k3_is("AM62-SKEVM")
-#define board_is_am62x_lp_skevm()	board_ti_k3_is("AM62-LP-SKEVM")
-
 DECLARE_GLOBAL_DATA_PTR;
 
 int board_init(void)
@@ -42,18 +38,8 @@ int dram_init_banksize(void)
 #if defined(CONFIG_SPL_LOAD_FIT)
 int board_fit_config_name_match(const char *name)
 {
-	bool eeprom_read = board_ti_was_eeprom_read();
-
-	if (!eeprom_read)
-		return -1;
-
-	if (board_is_am62x_lp_skevm()) {
-		if (!strcmp(name, "k3-am62x-r5-lp-sk") || !strcmp(name, "k3-am62x-lp-sk"))
-			return 0;
-	} else if (board_is_am62x_skevm()) {
-		if (!strcmp(name, "k3-am625-r5-sk") || !strcmp(name, "k3-am625-sk"))
-			return 0;
-	}
+	if (!strcmp(name, "k3-am625-r5-bytedevkit") || !strcmp(name, "k3-am625-bytedevkit"))
+		return 0;
 
 	return -1;
 }
@@ -110,93 +96,9 @@ void spl_perform_fixups(struct spl_image_info *spl_image)
 }
 #endif
 
-#ifdef CONFIG_TI_I2C_BOARD_DETECT
-int do_board_detect(void)
-{
-	int ret;
-
-	ret = ti_i2c_eeprom_am6_get_base(CONFIG_EEPROM_BUS_ADDRESS,
-					 CONFIG_EEPROM_CHIP_ADDRESS);
-	if (ret) {
-		printf("EEPROM not available at 0x%02x, trying to read at 0x%02x\n",
-		       CONFIG_EEPROM_CHIP_ADDRESS, CONFIG_EEPROM_CHIP_ADDRESS + 1);
-		ret = ti_i2c_eeprom_am6_get_base(CONFIG_EEPROM_BUS_ADDRESS,
-						 CONFIG_EEPROM_CHIP_ADDRESS + 1);
-		if (ret)
-			pr_err("Reading on-board EEPROM at 0x%02x failed %d\n",
-			       CONFIG_EEPROM_CHIP_ADDRESS + 1, ret);
-	}
-
-	return ret;
-}
-
-int checkboard(void)
-{
-	struct ti_am6_eeprom *ep = TI_AM6_EEPROM_DATA;
-
-	if (!do_board_detect())
-		printf("Board: %s rev %s\n", ep->name, ep->version);
-
-	return 0;
-}
-
-#ifdef CONFIG_BOARD_LATE_INIT
-static void setup_board_eeprom_env(void)
-{
-	char *name = "am62x_skevm";
-
-	if (do_board_detect())
-		goto invalid_eeprom;
-
-	if (board_is_am62x_skevm() || board_is_am62x_lp_skevm())
-		name = "am62x_skevm";
-	else
-		printf("Unidentified board claims %s in eeprom header\n",
-		       board_ti_get_name());
-
-invalid_eeprom:
-	set_board_info_env_am6(name);
-}
-
-static void setup_serial(void)
-{
-	struct ti_am6_eeprom *ep = TI_AM6_EEPROM_DATA;
-	unsigned long board_serial;
-	char *endp;
-	char serial_string[17] = { 0 };
-
-	if (env_get("serial#"))
-		return;
-
-	board_serial = simple_strtoul(ep->serial, &endp, 16);
-	if (*endp != '\0') {
-		pr_err("Error: Can't set serial# to %s\n", ep->serial);
-		return;
-	}
-
-	snprintf(serial_string, sizeof(serial_string), "%016lx", board_serial);
-	env_set("serial#", serial_string);
-}
-#endif
-#endif
-
 #ifdef CONFIG_BOARD_LATE_INIT
 int board_late_init(void)
 {
-	if (IS_ENABLED(CONFIG_TI_I2C_BOARD_DETECT)) {
-		struct ti_am6_eeprom *ep = TI_AM6_EEPROM_DATA;
-
-		setup_board_eeprom_env();
-		setup_serial();
-		/*
-		 * The first MAC address for ethernet a.k.a. ethernet0 comes from
-		 * efuse populated via the am654 gigabit eth switch subsystem driver.
-		 * All the other ones are populated via EEPROM, hence continue with
-		 * an index of 1.
-		 */
-		board_ti_am6_set_ethaddr(1, ep->mac_addr_cnt);
-	}
-
 	return 0;
 }
 #endif
-- 
2.30.2


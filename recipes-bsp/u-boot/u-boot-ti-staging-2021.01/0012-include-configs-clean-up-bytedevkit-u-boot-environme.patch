From 15f17b8a526422fc1958f5d659d60bbe5af40746 Mon Sep 17 00:00:00 2001
From: Rico Ganahl <rico.ganahl@bytesatwork.ch>
Date: Fri, 7 Oct 2022 15:13:56 +0200
Subject: [PATCH] include: configs: clean up bytedevkit u-boot environment

Keep it simple and support preferred boot media.
Remove generic boot environments (android, fastboot, ...).

Signed-off-by: Rico Ganahl <rico.ganahl@bytesatwork.ch>
---
 include/configs/am62x_bytedevkit.h | 481 +++++++++--------------------
 1 file changed, 151 insertions(+), 330 deletions(-)

diff --git a/include/configs/am62x_bytedevkit.h b/include/configs/am62x_bytedevkit.h
index dc5dcec38e..f7570eac64 100644
--- a/include/configs/am62x_bytedevkit.h
+++ b/include/configs/am62x_bytedevkit.h
@@ -11,21 +11,25 @@
 #define __CONFIG_AM62X_BYTEDEVKIT_H
 
 #include <linux/sizes.h>
-#include <config_distro_bootcmd.h>
-#include <environment/ti/mmc.h>
-#include <environment/ti/k3_dfu.h>
 
 /* DDR Configuration */
 #define CONFIG_SYS_SDRAM_BASE1		0x880000000
-#define CONFIG_SYS_BOOTM_LEN            SZ_64M
+#define CONFIG_SYS_BOOTM_LEN		SZ_64M
 
 #ifdef CONFIG_SYS_K3_SPL_ATF
 #define CONFIG_SPL_FS_LOAD_PAYLOAD_NAME	"tispl.bin"
 #endif
 
+#define CONFIG_SYS_MALLOC_LEN		SZ_128M
+
+/* baw config built in defaults */
+#define BAW_CONFIG_BUILTIN_PCB 10
+#define BAW_CONFIG_BUILTIN_RAM 14
+#define BAW_CONFIG_BUILTIN_FLASH 3
+
 #if defined(CONFIG_TARGET_AM62X_BYTEDEVKIT_A53)
 #define CONFIG_SPL_MAX_SIZE		SZ_1M
-#define CONFIG_SYS_INIT_SP_ADDR         (CONFIG_SPL_TEXT_BASE + SZ_4M)
+#define CONFIG_SYS_INIT_SP_ADDR		(CONFIG_SPL_TEXT_BASE + SZ_4M)
 #else
 #define CONFIG_SPL_MAX_SIZE		CONFIG_SYS_K3_MAX_DOWNLODABLE_IMAGE_SIZE
 /*
@@ -46,357 +50,174 @@
 #define CONFIG_SPL_BSS_START_ADDR	(0x43c3c800 -\
 					 CONFIG_SPL_BSS_MAX_SIZE)
 /* Set the stack right below the SPL BSS section */
-#define CONFIG_SYS_INIT_SP_ADDR         0x7000ffff
+#define CONFIG_SYS_INIT_SP_ADDR		0x7000ffff
 /* Configure R5 SPL post-relocation malloc pool in DDR */
-#define CONFIG_SYS_SPL_MALLOC_START    0x84000000
-#define CONFIG_SYS_SPL_MALLOC_SIZE     SZ_16M
+#define CONFIG_SYS_SPL_MALLOC_START	0x84000000
+#define CONFIG_SYS_SPL_MALLOC_SIZE	SZ_16M
 #endif
 
-#define PARTS_DEFAULT \
-	/* Linux partitions */ \
-	"uuid_disk=${uuid_gpt_disk};" \
-	"name=rootfs,start=0,size=-,uuid=${uuid_gpt_rootfs}\0" \
-	/* Android partitions */ \
-	"partitions_android=" \
-	"uuid_disk=${uuid_gpt_disk};" \
-	"name=bootloader,start=5M,size=8M,uuid=${uuid_gpt_bootloader};" \
-	"name=tiboot3,start=4M,size=1M,uuid=${uuid_gpt_tiboot3};" \
-	"name=uboot-env,start=13M,size=512K,uuid=${uuid_gpt_env};" \
-	"name=misc,start=13824K,size=512K,uuid=${uuid_gpt_misc};" \
-	"name=boot_a,size=40M,uuid=${uuid_gpt_boot_a};" \
-	"name=boot_b,size=40M,uuid=${uuid_gpt_boot_b};" \
-	"name=dtbo_a,size=8M,uuid=${uuid_gpt_dtbo_a};" \
-	"name=dtbo_b,size=8M,uuid=${uuid_gpt_dtbo_b};" \
-	"name=vbmeta_a,size=64K,uuid=${uuid_gpt_vbmeta_a};" \
-	"name=vbmeta_b,size=64K,uuid=${uuid_gpt_vbmeta_b};" \
-	"name=super,size=4608M,uuid=${uuid_gpt_super};" \
-	"name=metadata,size=16M,uuid=${uuid_gpt_metadata};" \
-	"name=userdata,size=-,uuid=${uuid_gpt_userdata}\0"
-
-/* ANDROID BOOT */
-#ifndef BOOT_PARTITION
-#define BOOT_PARTITION "boot"
-#endif
+#define CONFIG_BOOTCOMMAND \
+	"if mmc dev 1; then " \
+		"run mmc_boot; " \
+	"else; " \
+		"run emmc_boot; " \
+	"fi; "
+
+#define CONFIG_EXTRA_ENV_SETTINGS \
+	"console=ttyS2,115200n8\0" \
+	"dtbfile=" CONFIG_DEFAULT_DEVICE_TREE ".dtb\0" \
+	"kernelfile=Image\0" \
+	"loadaddr=0x82000000\0" \
+	"dtbaddr=0x88000000\0" \
+	"bootdir=/boot\0" \
+	"mmc_dev=1\0" \
+	"mmc_part=2\0" \
+	"mmc_root=/dev/mmcblk1p2\0" \
+	"args_mmc=setenv mmc_dev 1; setenv mmc_part 2;\0" \
+	"args_emmc=setenv mmc_dev 0; setenv mmc_part 1;\0" \
+	"args_generic=setenv bootargs console=${console} " \
+		"earlycon=ns16550a,mmio32,0x02800000 ${mtdparts} " \
+		"root=/dev/mmcblk${mmc_dev}p${mmc_part} " \
+		"rootfstype=ext4 rootwait ${bootargs_append}; " \
+	"\0" \
+	"mmc_boot=echo Booting from SD/MMC ...; run args_mmc; run generic_boot\0" \
+	"emmc_boot=echo Booting from eMMC ...; run args_emmc; run generic_boot\0" \
+	"generic_boot=" \
+		"run args_generic; " \
+		"load mmc ${mmc_dev}:${mmc_part} ${loadaddr} ${bootdir}/${kernelfile} || exit; " \
+		"load mmc ${mmc_dev}:${mmc_part} ${dtbaddr} ${bootdir}/${dtbfile} || exit; " \
+		"booti ${loadaddr} - ${dtbaddr}; " \
+	"\0" \
+	"update_spi=sf probe; " \
+		"fatload mmc 1 ${loadaddr} tiboot3.bin; " \
+		"sf update $loadaddr 0x0 $filesize; " \
+		"fatload mmc 1 ${loadaddr} tispl.bin; " \
+		"sf update $loadaddr 0x80000 $filesize; " \
+		"fatload mmc 1 ${loadaddr} u-boot.img; " \
+		"sf update $loadaddr 0x280000 $filesize; " \
+	"\0"
+
+/* The remaining common defines, source <configs/ti_armv7_common.h> */
 
-#ifndef CONTROL_PARTITION
-#define CONTROL_PARTITION "misc"
-#endif
+/*
+ * Our DDR memory always starts at 0x80000000 and U-Boot shall have
+ * relocated itself to higher in memory by the time this value is used.
+ * However, set this to a 32MB offset to allow for easier Linux kernel
+ * booting as the default is often used as the kernel load address.
+ */
+#define CONFIG_SYS_LOAD_ADDR		0x82000000
 
-#if defined(CONFIG_CMD_AVB)
-#define AVB_VERIFY_CHECK \
-	"if test \"${force_avb}\" -eq 1; then " \
-		"if run avb_verify; then " \
-			"echo AVB verification OK.;" \
-			"setenv bootargs \"$bootargs $avb_bootargs\";" \
-		"else " \
-			"echo AVB verification failed.;" \
-		"exit; fi;" \
-	"else " \
-		"setenv bootargs \"$bootargs androidboot.verifiedbootstate=orange\";" \
-		"echo Running without AVB...; "\
-	"fi;"
+/*
+ * DDR information. If the CONFIG_NR_DRAM_BANKS is not defined,
+ * we say (for simplicity) that we have 1 bank, always, even when
+ * we have more. We always start at 0x80000000, and we place the
+ * initial stack pointer in our SRAM. Otherwise, we can define
+ * CONFIG_NR_DRAM_BANKS before including this file.
+ */
+#define CONFIG_SYS_SDRAM_BASE		0x80000000
 
-#define AVB_VERIFY_CMD "avb_verify=avb init ${mmcdev}; avb verify $slot_suffix;\0"
-#else
-#define AVB_VERIFY_CHECK ""
-#define AVB_VERIFY_CMD ""
+#ifndef CONFIG_SYS_INIT_SP_ADDR
+#define CONFIG_SYS_INIT_SP_ADDR		(NON_SECURE_SRAM_END - \
+						GENERATED_GBL_DATA_SIZE)
 #endif
 
-#if defined(CONFIG_CMD_AB_SELECT)
-#define ANDROIDBOOT_GET_CURRENT_SLOT_CMD "get_current_slot=" \
-	"if part number mmc ${mmcdev} " CONTROL_PARTITION " control_part_number; " \
-	"then " \
-		"echo " CONTROL_PARTITION \
-			" partition number:${control_part_number};" \
-		"ab_select current_slot mmc ${mmcdev}:${control_part_number};" \
-	"else " \
-		"echo " CONTROL_PARTITION " partition not found;" \
-	"fi;\0"
-
-#define AB_SELECT_SLOT \
-	"run get_current_slot; " \
-	"if test -e \"${current_slot}\"; " \
-	"then " \
-		"setenv slot_suffix _${current_slot}; " \
-	"else " \
-		"echo current_slot not found;" \
-		"exit;" \
-	"fi;"
-
-#define AB_SELECT_ARGS \
-	"setenv bootargs_ab androidboot.slot_suffix=${slot_suffix}; " \
-	"echo A/B cmdline addition: ${bootargs_ab};" \
-	"setenv bootargs ${bootargs} ${bootargs_ab};"
+/* Timer information. */
+#define CONFIG_SYS_PTV			2	/* Divisor: 2^(PTV+1) => 8 */
 
-#define AB_BOOTARGS " androidboot.force_normal_boot=1"
-#define RECOVERY_PARTITION "boot"
-#else
-#define AB_SELECT_SLOT ""
-#define AB_SELECT_ARGS " "
-#define ANDROIDBOOT_GET_CURRENT_SLOT_CMD ""
-#define AB_BOOTARGS " "
-#define RECOVERY_PARTITION "recovery"
+/* If DM_I2C, enable non-DM I2C support */
+#if !defined(CONFIG_DM_I2C)
+#define CONFIG_I2C
+#define CONFIG_SYS_I2C
 #endif
 
 /*
- * Prepares complete device tree blob for current board (for Android boot).
- *
- * Boot image or recovery image should be loaded into $loadaddr prior to running
- * these commands. The logic of these commnads is next:
- *
- *   1. Read correct DTB for current SoC/board from boot image in $loadaddr
- *      to $fdtaddr
- *   2. Merge all needed DTBO for current board from 'dtbo' partition into read
- *      DTB
- *   3. User should provide $fdtaddr as 3rd argument to 'bootm'
+ * The following are general good-enough settings for U-Boot. We set a
+ * large malloc pool as we generally have a lot of DDR, and we opt for
+ * function over binary size in the main portion of U-Boot as this is
+ * generally easily constrained later if needed. We enable the config
+ * options that give us information in the environment about what board
+ * we are on so we do not need to rely on the command prompt. We set a
+ * console baudrate of 115200 and use the default baud rate table.
  */
-#define PREPARE_FDT \
-	"echo Preparing FDT...; " \
-	"if test $board_name = am62x_skevm; then " \
-		"echo \"  Reading DTB for am62x_skevm...\"; " \
-		"setenv dtb_index 0;" \
-	"else " \
-		"echo Error: Android boot is not supported for $board_name; " \
-		"exit; " \
-	"fi; " \
-	"abootimg get dtb --index=$dtb_index dtb_start dtb_size; " \
-	"cp.b $dtb_start $fdt_addr_r $dtb_size; " \
-	"fdt addr $fdt_addr_r  0x80000; " \
-
-#define BOOT_CMD "bootm ${loadaddr} ${loadaddr} ${fdt_addr_r};"
-
-/* U-Boot general configuration */
-#define EXTRA_ENV_AM625_BOARD_SETTINGS					\
-	"default_device_tree=" CONFIG_DEFAULT_DEVICE_TREE ".dtb\0"	\
-	"findfdt="							\
-		"setenv name_fdt ${default_device_tree};"		\
-		"setenv fdtfile ${name_fdt}\0"				\
-	"name_kern=Image\0"						\
-	"console=ttyS2,115200n8\0"					\
-	"args_all=setenv optargs ${optargs} "				\
-		"earlycon=ns16550a,mmio32,0x02800000 ${mtdparts}\0"	\
-	"run_kern=booti ${loadaddr} ${rd_spec} ${fdtaddr}\0"
-
-/* U-Boot MMC-specific configuration */
-#define EXTRA_ENV_AM625_BOARD_SETTINGS_MMC				\
-	"boot=mmc\0"							\
-	"mmcdev=1\0"							\
-	"bootpart=1:2\0"						\
-	"bootdir=/boot\0"						\
-	"rd_spec=-\0"							\
-	"init_mmc=run args_all args_mmc\0"				\
-	"get_fdt_mmc=load mmc ${bootpart} ${fdtaddr} ${bootdir}/${name_fdt}\0" \
-	"get_overlay_mmc="						\
-		"fdt address ${fdtaddr};"				\
-		"fdt resize 0x100000;"					\
-		"for overlay in $name_overlays;"			\
-		"do;"							\
-		"load mmc ${bootpart} ${dtboaddr} ${bootdir}/${overlay} && "	\
-		"fdt apply ${dtboaddr};"				\
-		"done;\0"						\
-	"get_kern_mmc=load mmc ${bootpart} ${loadaddr} "		\
-		"${bootdir}/${name_kern}\0"				\
-	"get_fit_mmc=load mmc ${bootpart} ${addr_fit} "			\
-		"${bootdir}/${name_fit}\0"				\
-	"partitions=" PARTS_DEFAULT
-
-#define EXTRA_ENV_AM625_BOARD_SETTING_USBMSC				\
-	"args_usb=run finduuid;setenv bootargs console=${console} "	\
-		"${optargs} "						\
-		"root=PARTUUID=${uuid} rw "				\
-		"rootfstype=${mmcrootfstype}\0"				\
-	"init_usb=run args_all args_usb\0"				\
-	"get_fdt_usb=load usb ${bootpart} ${fdtaddr} ${bootdir}/${fdtfile}\0"	\
-	"get_overlay_usb="						\
-		"fdt address ${fdtaddr};"				\
-		"fdt resize 0x100000;"					\
-		"for overlay in $name_overlays;"			\
-		"do;"							\
-		"load usb ${bootpart} ${dtboaddr} ${bootdir}/${overlay} && "	\
-		"fdt apply ${dtboaddr};"				\
-		"done;\0"						\
-	"get_kern_usb=load usb ${bootpart} ${loadaddr} "		\
-		"${bootdir}/${name_kern}\0"				\
-	"get_fit_usb=load usb ${bootpart} ${addr_fit} "			\
-		"${bootdir}/${name_fit}\0"				\
-	"usbboot=setenv boot usb;"					\
-		"setenv bootpart 0:2;"					\
-		"usb start;"						\
-		"run findfdt;"						\
-		"run init_usb;"						\
-		"run get_kern_usb;"					\
-		"run get_fdt_usb;"					\
-		"run run_kern\0"
-
-#define BOOTENV_DEV_FASTBOOT(devtypeu, devtypel, instance) \
-	"bootcmd_fastboot=" \
-		"if test \"${android_boot}\" -eq 1; then;" \
-			"setenv run_fastboot 0;" \
-			"if gpt verify mmc ${mmcdev} ${partitions}; then; " \
-			"else " \
-				"echo Broken MMC partition scheme;" \
-				"setenv run_fastboot 1;" \
-			"fi; " \
-			"if test \"${run_fastboot}\" -eq 0; then " \
-				"if bcb load " __stringify(CONFIG_FASTBOOT_FLASH_MMC_DEV) " " \
-				CONTROL_PARTITION "; then " \
-					"if bcb test command = bootonce-bootloader; then " \
-						"echo BCB: Bootloader boot...; " \
-						"bcb clear command; bcb store; " \
-						"setenv run_fastboot 1;" \
-					"elif bcb test command = boot-fastboot; then " \
-						"echo BCB: fastboot userspace boot...; " \
-						"setenv force_recovery 1;" \
-					"fi; " \
-				"else " \
-					"echo Warning: BCB is corrupted or does not exist; " \
-				"fi;" \
-			"fi;" \
-			"if test \"${run_fastboot}\" -eq 1; then " \
-				"echo Running Fastboot...;" \
-				"fastboot " __stringify(CONFIG_FASTBOOT_USB_DEV) "; " \
-			"fi;" \
-		"fi\0"
 
-#define BOOTENV_DEV_NAME_FASTBOOT(devtypeu, devtypel, instance)	\
-		"fastboot "
+/* As stated above, the following choices are optional. */
 
-#define BOOTENV_DEV_RECOVERY(devtypeu, devtypel, instance) \
-	"bootcmd_recovery=" \
-		"if test \"${android_boot}\" -eq 1; then;" \
-			"setenv run_recovery 0;" \
-			"if bcb load " __stringify(CONFIG_FASTBOOT_FLASH_MMC_DEV) " " \
-			CONTROL_PARTITION "; then " \
-				"if bcb test command = boot-recovery; then; " \
-					"echo BCB: Recovery boot...; " \
-					"setenv run_recovery 1;" \
-				"fi;" \
-			"else " \
-				"echo Warning: BCB is corrupted or does not exist; " \
-			"fi;" \
-			"if test \"${skip_recovery}\" -eq 1; then " \
-				"echo Recovery skipped by environment;" \
-				"setenv run_recovery 0;" \
-			"fi;" \
-			"if test \"${force_recovery}\" -eq 1; then " \
-				"echo Recovery forced by environment;" \
-				"setenv run_recovery 1;" \
-			"fi;" \
-			"if test \"${run_recovery}\" -eq 1; then " \
-				"echo Running Recovery...;" \
-				"mmc dev ${mmcdev};" \
-				"setenv bootargs \"${bootargs} androidboot.serialno=${serial#}\";" \
-				AB_SELECT_SLOT \
-				AB_SELECT_ARGS \
-				AVB_VERIFY_CHECK \
-				"part start mmc ${mmcdev} " RECOVERY_PARTITION "${slot_suffix} " \
-					"boot_start;" \
-				"part size mmc ${mmcdev} " RECOVERY_PARTITION "${slot_suffix} " \
-					"boot_size;" \
-				"if mmc read ${loadaddr} ${boot_start} ${boot_size}; then " \
-					PREPARE_FDT \
-					"echo Running Android Recovery...;" \
-					BOOT_CMD \
-				"fi;" \
-				"echo Failed to boot Android...;" \
-				"reset;" \
-			"fi;" \
-		"fi\0"
+/* We set the max number of command args high to avoid HUSH bugs. */
+#define CONFIG_SYS_MAXARGS		64
 
-#define BOOTENV_DEV_NAME_RECOVERY(devtypeu, devtypel, instance)	\
-		"recovery "
+/* Console I/O Buffer Size */
+#define CONFIG_SYS_CBSIZE		1024
+/* Boot Argument Buffer Size */
+#define CONFIG_SYS_BARGSIZE		CONFIG_SYS_CBSIZE
 
-#define BOOTENV_DEV_SYSTEM(devtypeu, devtypel, instance) \
-	"bootcmd_system=" \
-		"if test \"${android_boot}\" -eq 1; then;" \
-			"echo Loading Android " BOOT_PARTITION " partition...;" \
-			"mmc dev ${mmcdev};" \
-			"setenv bootargs ${bootargs} androidboot.serialno=${serial#};" \
-			AB_SELECT_SLOT \
-			AB_SELECT_ARGS \
-			AVB_VERIFY_CHECK \
-			"part start mmc ${mmcdev} " BOOT_PARTITION "${slot_suffix} boot_start;" \
-			"part size mmc ${mmcdev} " BOOT_PARTITION "${slot_suffix} boot_size;" \
-			"if mmc read ${loadaddr} ${boot_start} ${boot_size}; then " \
-				PREPARE_FDT \
-				"setenv bootargs \"${bootargs} " AB_BOOTARGS "\"  ; " \
-				"echo Running Android...;" \
-				BOOT_CMD \
-			"fi;" \
-			"echo Failed to boot Android...;" \
-		"fi\0"
-
-#define BOOTENV_DEV_NAME_SYSTEM(devtypeu, devtypel, instance)	\
-		"system "
-
-#define BOOTENV_DEV_PANIC(devtypeu, devtypel, instance) \
-	"bootcmd_panic=" \
-		"if test \"${android_boot}\" -eq 1; then;" \
-			"fastboot " __stringify(CONFIG_FASTBOOT_USB_DEV) "; " \
-			"reset;" \
-		"fi\0"
-
-#define BOOTENV_DEV_NAME_PANIC(devtypeu, devtypel, instance)	\
-		"panic "
-
-#define EXTRA_ANDROID_ENV_SETTINGS                                     \
-	"set_android_boot=setenv android_boot 1;setenv partitions $partitions_android;" \
-	"setenv mmcdev 0;setenv force_avb 0;saveenv;\0" \
-	ANDROIDBOOT_GET_CURRENT_SLOT_CMD                              \
-	AVB_VERIFY_CMD                                                \
-	BOOTENV
+/*
+ * When we have SPI, NOR or NAND flash we expect to be making use of
+ * mtdparts, both for ease of use in U-Boot and for passing information
+ * on to the Linux kernel.
+ */
 
-#define BOOTENV_DEV_LINUX(devtypeu, devtypel, instance) \
-	"bootcmd_linux=" \
-		"if test \"${android_boot}\" -eq 0; then;" \
-			"run findfdt; run envboot;" \
-			"run init_${boot}; run get_kern_${boot}; "\
-			"run get_fdt_${boot}; run get_overlay_${boot}; run run_kern;" \
-		"fi\0"
+/*
+ * Our platforms make use of SPL to initialize the hardware (primarily
+ * memory) enough for full U-Boot to be loaded. We make use of the general
+ * SPL framework found under common/spl/. Given our generally common memory
+ * map, we set a number of related defaults and sizes here.
+ */
+#if !defined(CONFIG_NOR_BOOT) && \
+	!(defined(CONFIG_QSPI_BOOT) && defined(CONFIG_AM43XX))
 
-#define BOOTENV_DEV_NAME_LINUX(devtypeu, devtypel, instance)	\
-		"linux "
+/*
+ * We also support Falcon Mode so that the Linux kernel can be booted
+ * directly from SPL. This is not currently available on HS devices.
+ */
 
-#define EXTRA_ENV_DFUARGS \
-	DFU_ALT_INFO_MMC \
-	DFU_ALT_INFO_EMMC \
-	DFU_ALT_INFO_RAM \
-	DFU_ALT_INFO_OSPI
+/*
+ * Place the image at the start of the ROM defined image space (per
+ * CONFIG_SPL_TEXT_BASE and we limit our size to the ROM-defined
+ * downloaded image area minus 1KiB for scratch space. We initialize DRAM as
+ * soon as we can so that we can place stack, malloc and BSS there. We load
+ * U-Boot itself into memory at 0x80800000 for legacy reasons (to not conflict
+ * with older SPLs). We have our BSS be placed 2MiB after this, to allow for
+ * the default Linux kernel address of 0x80008000 to work with most sized
+ * kernels, in the Falcon Mode case. We have the SPL malloc pool at the end
+ * of the BSS area. We suggest that the stack be placed at 32MiB after the
+ * start of DRAM to allow room for all of the above (handled in Kconfig).
+ */
+#ifndef CONFIG_SPL_BSS_START_ADDR
+#define CONFIG_SPL_BSS_START_ADDR	0x80a00000
+#define CONFIG_SPL_BSS_MAX_SIZE		0x80000		/* 512 KB */
+#endif
+#ifndef CONFIG_SYS_SPL_MALLOC_START
+#define CONFIG_SYS_SPL_MALLOC_START	(CONFIG_SPL_BSS_START_ADDR + \
+					 CONFIG_SPL_BSS_MAX_SIZE)
+#define CONFIG_SYS_SPL_MALLOC_SIZE	SZ_8M
+#endif
+#ifndef CONFIG_SPL_MAX_SIZE
+#define CONFIG_SPL_MAX_SIZE		(SRAM_SCRATCH_SPACE_ADDR - \
+					 CONFIG_SPL_TEXT_BASE)
+#endif
 
-#define BOOT_TARGET_DEVICES(func) \
-	func(LINUX, linux, na) \
-	func(FASTBOOT, fastboot, na) \
-	func(RECOVERY, recovery, na) \
-	func(SYSTEM, system, na) \
-	func(PANIC, panic, na) \
 
-/* Incorporate settings into the U-Boot environment */
-#define CONFIG_EXTRA_ENV_SETTINGS					\
-	EXTRA_ANDROID_ENV_SETTINGS	\
-	DEFAULT_LINUX_BOOT_ENV						\
-	DEFAULT_MMC_TI_ARGS						\
-	EXTRA_ENV_AM625_BOARD_SETTINGS					\
-	EXTRA_ENV_AM625_BOARD_SETTINGS_MMC				\
-	EXTRA_ENV_DFUARGS						\
-	EXTRA_ENV_AM625_BOARD_SETTING_USBMSC
+/* FAT sd card locations. */
+#ifndef CONFIG_SPL_FS_LOAD_PAYLOAD_NAME
+#define CONFIG_SPL_FS_LOAD_PAYLOAD_NAME	"u-boot.img"
+#endif
 
-/* Now for the remaining common defines */
-#include <configs/ti_armv7_common.h>
+#ifdef CONFIG_SPL_OS_BOOT
+/* FAT */
+#define CONFIG_SPL_FS_LOAD_KERNEL_NAME		"uImage"
+#define CONFIG_SPL_FS_LOAD_ARGS_NAME		"args"
 
-/* MMC ENV related defines */
-#ifdef CONFIG_ENV_IS_IN_MMC
-#define CONFIG_SYS_MMC_ENV_DEV		0
-#define CONFIG_SYS_MMC_ENV_PART		1
+/* RAW SD card / eMMC */
+#define CONFIG_SYS_MMCSD_RAW_MODE_KERNEL_SECTOR	0x1700	/* address 0x2E0000 */
+#define CONFIG_SYS_MMCSD_RAW_MODE_ARGS_SECTOR	0x1500	/* address 0x2A0000 */
+#define CONFIG_SYS_MMCSD_RAW_MODE_ARGS_SECTORS	0x200	/* 256KiB */
 #endif
 
-#ifdef CONFIG_SYS_MALLOC_LEN
-#undef CONFIG_SYS_MALLOC_LEN
-#endif
-#define CONFIG_SYS_MALLOC_LEN           SZ_128M
+/* General parts of the framework, required. */
 
-/* baw config built in defaults */
-#define BAW_CONFIG_BUILTIN_PCB 10
-#define BAW_CONFIG_BUILTIN_RAM 14
-#define BAW_CONFIG_BUILTIN_FLASH 4
+#ifdef CONFIG_MTD_RAW_NAND
+#define CONFIG_SYS_NAND_U_BOOT_START	CONFIG_SYS_TEXT_BASE
+#endif
+#endif /* !CONFIG_NOR_BOOT */
 
 #endif /* __CONFIG_AM62X_BYTEDEVKIT_H */
-- 
2.30.2


From ff023f5c5b21c61556b3ff653cbb0b0fc691de06 Mon Sep 17 00:00:00 2001
From: Rico Ganahl <rico.ganahl@bytesatwork.ch>
Date: Wed, 2 Feb 2022 09:16:56 +0100
Subject: [PATCH] bytesatwork: m2config: verbatim import

Import from bytesatwork am335x u-boot.

Signed-off-by: Rico Ganahl <rico.ganahl@bytesatwork.ch>
(cherry picked from commit 3578ec17f403bcb64c1014f6fe145a1258443f23)
---
 board/bytesatwork/baw_config/MAINTAINERS      |   5 +
 board/bytesatwork/baw_config/README           |  68 ++++
 board/bytesatwork/baw_config/cmd_m2config.c   | 223 +++++++++++++
 board/bytesatwork/baw_config/m2config.c       |  45 +++
 board/bytesatwork/baw_config/m2config.h       |  79 +++++
 .../bytesatwork/baw_config/m2config_builtin.c |  15 +
 .../bytesatwork/baw_config/m2config_builtin.h |  21 ++
 .../bytesatwork/baw_config/m2config_eeprom.c  | 301 ++++++++++++++++++
 .../bytesatwork/baw_config/m2config_eeprom.h  |  37 +++
 board/bytesatwork/baw_config/m2config_get.c   |  45 +++
 board/bytesatwork/baw_config/m2config_get.h   |  13 +
 11 files changed, 852 insertions(+)
 create mode 100644 board/bytesatwork/baw_config/MAINTAINERS
 create mode 100644 board/bytesatwork/baw_config/README
 create mode 100644 board/bytesatwork/baw_config/cmd_m2config.c
 create mode 100644 board/bytesatwork/baw_config/m2config.c
 create mode 100644 board/bytesatwork/baw_config/m2config.h
 create mode 100644 board/bytesatwork/baw_config/m2config_builtin.c
 create mode 100644 board/bytesatwork/baw_config/m2config_builtin.h
 create mode 100644 board/bytesatwork/baw_config/m2config_eeprom.c
 create mode 100644 board/bytesatwork/baw_config/m2config_eeprom.h
 create mode 100644 board/bytesatwork/baw_config/m2config_get.c
 create mode 100644 board/bytesatwork/baw_config/m2config_get.h

diff --git a/board/bytesatwork/baw_config/MAINTAINERS b/board/bytesatwork/baw_config/MAINTAINERS
new file mode 100644
index 0000000000..a7c6c2867d
--- /dev/null
+++ b/board/bytesatwork/baw_config/MAINTAINERS
@@ -0,0 +1,5 @@
+BYTESATWORK BAWCONFIG
+M:	Rico Ganahl <rico.ganahl@bytesatwork.ch>
+S:	Maintained
+F:	board/bytesatwork/baw_config/*m2config*
+F:	board/bytesatwork/baw_config/README
diff --git a/board/bytesatwork/baw_config/README b/board/bytesatwork/baw_config/README
new file mode 100644
index 0000000000..f82ef75ac3
--- /dev/null
+++ b/board/bytesatwork/baw_config/README
@@ -0,0 +1,68 @@
+
+Configuration options:
+
+CONFIG_CMD_M2CONFIG
+If defined, add the u-boot command m2config to read and write the configuration.
+
+CONFIG_M2CONFIG_EEPROM
+If defined, add method to read (SPL) and write (SPL and u-boot) the
+configuration from the eeprom.
+
+CONFIG_M2CONFIG_BUILTIN
+If defined, add built-in configuration values. Define the following names:
+  M2CONFIG_BUILTIN_PCB
+  M2CONFIG_BUILTIN_RAM
+  M2CONFIG_BUILTIN_FLASH
+
+If both CONFIG_M2CONFIG_EEPROM and CONFIG_M2CONFIG_BUILTIN are defined, the
+order is defined in m2config_get.
+
+At least one of CONFIG_M2CONFIG_EEPROM or CONFIG_M2CONFIG_BUILTIN has to be
+defined.
+
+
+EEPROM format
+
+Byte order is the native byte order of the CPU. The format is:
+
+Bytes  Usage
+  2    Magic
+  2    length
+  4    PCB
+  4    RAM
+  4    Flash
+  4    CRC
+
+Magic is 0x6268. CRC is the native u-boot crc32.
+
+
+Extended data EEPROM format
+
+Byte order is the native byte order of the CPU. The format is:
+
+Bytes  Usage
+  2    Magic ext.
+  2    length
+  4    CRC
+  4    Article number
+  4    Lot
+  1    Lot sequence number
+ 12    Production date
+  6    Flash date
+  6    Flash user
+
+Magic is 0x6235. CRC is the native u-boot crc32.
+
+
+Tracking data EEPROM format
+
+Byte order is the native byte order of the CPU. The format is:
+
+Bytes  Usage
+  2    Magic (tracking data)
+  2    length
+  4    CRC
+ 18    MAC address
+ 16    UID
+
+Magic is 0x6e4a. CRC is the native u-boot crc32.
diff --git a/board/bytesatwork/baw_config/cmd_m2config.c b/board/bytesatwork/baw_config/cmd_m2config.c
new file mode 100644
index 0000000000..e1bfdedc31
--- /dev/null
+++ b/board/bytesatwork/baw_config/cmd_m2config.c
@@ -0,0 +1,223 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2015 bytes at work AG
+ */
+
+#include <common.h>
+#include <command.h>
+#include <post.h>
+#include "m2config_builtin.h"
+#include "m2config_eeprom.h"
+
+static void print_config(const struct m2config *config)
+{
+	printf("PCB:   %u (%s)\n", config->pcb,
+	       m2config_get_pcb_name(config->pcb));
+	printf("RAM:   %u (%s)\n", config->ram,
+	       m2config_get_ram_name(config->ram));
+	printf("Flash: %u (%s)\n", config->flash,
+	       m2config_get_flash_name(config->flash));
+
+	if (config->ext_avail == 1) {
+		printf("\n");
+		printf("Article number:  %u\n", config->artno);
+		printf("Lot:             %u.%u\n", config->lot, config->lotseq);
+		printf("Production date: %s\n", config->proddate);
+		printf("Flash date:      %s\n", config->flashdate);
+		printf("Flash user:      %s\n", config->flashuser);
+	}
+
+	if (config->track_avail == 1) {
+		printf("\n");
+		printf("MAC address:     %s\n", config->macaddr);
+		printf("UID:             %s\n", config->uid);
+	}
+}
+
+#if defined(CONFIG_M2CONFIG_BUILTIN)
+static enum command_ret_t cmd_builtin(int argc, char * const argv[])
+{
+	struct m2config config;
+
+	if (argc != 0)
+		return CMD_RET_USAGE;
+
+	if (m2config_builtin(&config) != 0) {
+		printf("could not get built-in configuration\n");
+		return CMD_RET_FAILURE;
+	}
+
+	print_config(&config);
+
+	return CMD_RET_SUCCESS;
+}
+#endif
+
+#if defined(CONFIG_M2CONFIG_EEPROM)
+static enum command_ret_t cmd_read(int argc, char * const argv[])
+{
+	struct m2config config;
+	int ret;
+
+	if (argc != 0)
+		return CMD_RET_USAGE;
+
+	ret = m2config_eeprom_read(&config);
+	if (ret != 0)
+		printf("no configuration in eeprom: %i\n", ret);
+	else
+		print_config(&config);
+
+	return CMD_RET_SUCCESS;
+}
+
+static enum command_ret_t cmd_write(int argc, char * const argv[])
+{
+	struct m2config config;
+
+	if (argc != 11)
+		return CMD_RET_USAGE;
+
+	config.pcb = simple_strtoul(argv[0], NULL, 10);
+	config.ram = simple_strtoul(argv[1], NULL, 10);
+	config.flash = simple_strtoul(argv[2], NULL, 10);
+
+	config.artno = simple_strtoul(argv[3], NULL, 10);
+	config.lot = simple_strtoul(argv[4], NULL, 10);
+	config.lotseq = simple_strtoul(argv[5], NULL, 10);
+	strlcpy(config.proddate, argv[6], sizeof(config.proddate));
+	strlcpy(config.flashdate, argv[7], sizeof(config.flashdate));
+	strlcpy(config.flashuser, argv[8], sizeof(config.flashuser));
+
+	strlcpy(config.macaddr, argv[9], sizeof(config.macaddr));
+	strlcpy(config.uid, argv[10], sizeof(config.uid));
+
+	if (m2config_eeprom_write(&config) != 0) {
+		printf("could not write to EEPROM\n");
+		return CMD_RET_FAILURE;
+	}
+
+	return CMD_RET_SUCCESS;
+}
+
+static enum command_ret_t cmd_erase(int argc, char * const argv[])
+{
+	if (argc != 0)
+		return CMD_RET_USAGE;
+
+	if (m2config_eeprom_erase() != 0) {
+		printf("could not erase configuration\n");
+		return CMD_RET_FAILURE;
+	}
+
+	return CMD_RET_SUCCESS;
+}
+
+#if defined(CONFIG_M2CONFIG_BUILTIN)
+static enum command_ret_t cmd_builtin2eeprom(int argc, char * const argv[])
+{
+	struct m2config config;
+
+	if (argc != 0)
+		return CMD_RET_USAGE;
+
+	if (m2config_builtin(&config) != 0) {
+		printf("could not get built-in configuration\n");
+		return CMD_RET_FAILURE;
+	}
+
+	if (m2config_eeprom_write(&config) != 0) {
+		printf("could not write to EEPROM\n");
+		return CMD_RET_FAILURE;
+	}
+
+	return CMD_RET_SUCCESS;
+}
+#endif
+#endif
+
+struct m2config_cmd_struct {
+		char  *name;
+		enum command_ret_t (*func)(int argc, char * const argv[]);
+};
+
+static const struct m2config_cmd_struct m2config_cmd[] = {
+#if defined(CONFIG_M2CONFIG_BUILTIN)
+	{ "builtin", cmd_builtin },
+#endif
+#if defined(CONFIG_M2CONFIG_EEPROM)
+	{ "read", cmd_read },
+	{ "erase", cmd_erase },
+	{ "write", cmd_write },
+#if defined(CONFIG_M2CONFIG_BUILTIN)
+	{ "builtin2eeprom", cmd_builtin2eeprom },
+#endif
+#endif
+	{ NULL, NULL }
+};
+
+static const struct m2config_cmd_struct *get_cmd(const char *name)
+{
+	const struct m2config_cmd_struct *cmd;
+
+	for (cmd = m2config_cmd; cmd->name; cmd++)
+		if (strcmp(name, cmd->name) == 0)
+			return cmd;
+
+	return NULL;
+}
+
+static void print_config_names(const struct m2config_name_pair *map)
+{
+	const struct m2config_name_pair *itr;
+
+	for (itr = map; itr->name; itr++)
+		printf("  %u (%s)\n", itr->config, itr->name);
+}
+
+static enum command_ret_t print_configurations(void)
+{
+	printf("PCB:\n");
+	print_config_names(m2config_pcb_name);
+	printf("RAM:\n");
+	print_config_names(m2config_ram_name);
+	printf("Flash:\n");
+	print_config_names(m2config_flash_name);
+
+	return CMD_RET_SUCCESS;
+}
+
+enum command_ret_t do_m2config(cmd_tbl_t *cmdtp, int flag, int argc,
+			       char * const argv[])
+{
+	if (argc >= 2) {
+		const struct m2config_cmd_struct *cmd = get_cmd(argv[1]);
+
+		if (cmd)
+			return cmd->func(argc - 2, &argv[2]);
+		else
+			return CMD_RET_USAGE;
+	}
+
+	return print_configurations();
+}
+
+U_BOOT_CMD(
+	m2config, 13, 0, do_m2config,
+	"perform m2 configuration",
+	"- list known configuration values\n"
+#if defined(CONFIG_M2CONFIG_BUILTIN)
+	"builtin  - print built-in configuration from u-boot\n"
+#endif
+#if defined(CONFIG_M2CONFIG_EEPROM)
+	"read     - read configuration from EEPROM\n"
+	"erase    - erase configuration from EEPROM\n"
+	"write <PCB> <RAM> <Flash> <Article number> <Lot> <Lot sequence number>\n"
+	"      <Production date> <Flash date> <Flash user> <MAC address> <UID>\n"
+	"         - write configuration to EEPROM\n"
+#if defined(CONFIG_M2CONFIG_BUILTIN)
+	"builtin2eeprom\n"
+	"         - write built-in configuration to EEPROM\n"
+#endif
+#endif
+);
diff --git a/board/bytesatwork/baw_config/m2config.c b/board/bytesatwork/baw_config/m2config.c
new file mode 100644
index 0000000000..202e888382
--- /dev/null
+++ b/board/bytesatwork/baw_config/m2config.c
@@ -0,0 +1,45 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2015 bytes at work AG
+ */
+
+#include "m2config.h"
+
+const struct m2config_name_pair m2config_pcb_name[] = {
+	{ M2_PCB_REV_00, "Rev.00" },
+	{ M2_PCB_REV_01, "Rev.01" },
+	{ M2_PCB_REV_02, "Rev.02" },
+	{ M2_PCB_REV_03, "Rev.03" },
+	{ M2_PCB_REV_04, "Rev.04" },
+	{ -1, NULL },
+};
+
+const struct m2config_name_pair m2config_ram_name[] = {
+	{ M2_RAM_MT47H128M16RT25E, "MT47H128M16RT25E 256 MB DDR2 @ 266MHz" },
+	{ M2_RAM_K4B2G1646EBIH9,   "K4B2G1646EBIH9 legacy DDR3 @ 303MHz" },
+	{ M2_RAM_K4B2G1646QBCK0,   "K4B2G1646QBCK0 256 MB DDR3 @ 400Mhz" },
+	{ M2_RAM_K4B4G1646DBIK0,   "K4B4G1646DBIK0 512 MB DDR3 @ 400MHz" },
+	{ M2_RAM_MT41K512M16HA107, "MT41K512M16HA107 1024MB DDR3 @ 303MHz" },
+	{ -1, NULL },
+};
+
+const struct m2config_name_pair m2config_flash_name[] = {
+	{ M2_NAND_2GBIT, "Nand 2 GBit" },
+	{ M2_NAND_4GBIT, "Nand 4 GBit" },
+	{ M2_EMMC_4GB, "EMMC 4 GB" },
+	{ M2_EMMC_8GB, "EMMC 8 GB" },
+	{ M2_EMMC_16GB, "EMMC 16 GB" },
+	{ M2_EMMC_32GB, "EMMC 32 GB" },
+	{ -1, NULL },
+};
+
+const char *m2config_get_name(u32 config, const struct m2config_name_pair *map)
+{
+	const struct m2config_name_pair *itr;
+
+	for (itr = map; itr->name; itr++)
+		if (itr->config == config)
+			return itr->name;
+
+	return "unknown";
+}
diff --git a/board/bytesatwork/baw_config/m2config.h b/board/bytesatwork/baw_config/m2config.h
new file mode 100644
index 0000000000..4ef104b379
--- /dev/null
+++ b/board/bytesatwork/baw_config/m2config.h
@@ -0,0 +1,79 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2015 bytes at work AG
+ */
+
+#ifndef M2CONFIG_H
+#define M2CONFIG_H
+
+#include <config.h>
+#include <linux/types.h>
+
+typedef enum {
+	M2_PCB_REV_00 = 0,
+	M2_PCB_REV_01 = 1,
+	M2_PCB_REV_02 = 2,
+	M2_PCB_REV_03 = 3,
+	M2_PCB_REV_04 = 4,
+} m2config_pcb_t;
+
+typedef enum {
+	M2_RAM_MT47H128M16RT25E = 1,
+	M2_RAM_K4B2G1646EBIH9   = 2,
+	M2_RAM_K4B2G1646QBCK0   = 3,
+	M2_RAM_K4B4G1646DBIK0   = 4,
+	M2_RAM_MT41K512M16HA107 = 5,
+} m2config_ram_t;
+
+typedef enum {
+	M2_NAND_2GBIT  = 0,
+	M2_NAND_4GBIT  = 1,
+	M2_EMMC_4GB  = 2,
+	M2_EMMC_8GB  = 3,
+	M2_EMMC_16GB = 4,
+	M2_EMMC_32GB = 5,
+} m2config_flash_t;
+
+struct m2config {
+	m2config_pcb_t		pcb;
+	m2config_ram_t		ram;
+	m2config_flash_t	flash;
+	bool			ext_avail;
+	u32		artno;
+	u32		lot;
+	u8			lotseq;
+	char			proddate[12];
+	char			flashdate[6];
+	char			flashuser[6];
+	bool			track_avail;
+	char			macaddr[18];
+	char			uid[16];
+};
+
+struct m2config_name_pair {
+	u32	config;
+	const char	*name;
+};
+
+extern const struct m2config_name_pair m2config_pcb_name[];
+extern const struct m2config_name_pair m2config_ram_name[];
+extern const struct m2config_name_pair m2config_flash_name[];
+
+const char *m2config_get_name(u32 config, const struct m2config_name_pair *map);
+
+static inline const char *m2config_get_pcb_name(m2config_pcb_t config)
+{
+	return m2config_get_name(config, m2config_pcb_name);
+}
+
+static inline const char *m2config_get_ram_name(m2config_ram_t config)
+{
+	return m2config_get_name(config, m2config_ram_name);
+}
+
+static inline const char *m2config_get_flash_name(m2config_flash_t config)
+{
+	return m2config_get_name(config, m2config_flash_name);
+}
+
+#endif
diff --git a/board/bytesatwork/baw_config/m2config_builtin.c b/board/bytesatwork/baw_config/m2config_builtin.c
new file mode 100644
index 0000000000..ccce010797
--- /dev/null
+++ b/board/bytesatwork/baw_config/m2config_builtin.c
@@ -0,0 +1,15 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2015 bytes at work AG
+ */
+
+#include "m2config.h"
+#include <config.h>
+
+int m2config_builtin(struct m2config *config)
+{
+	config->pcb    = M2CONFIG_BUILTIN_PCB;
+	config->ram    = M2CONFIG_BUILTIN_RAM;
+	config->flash  = M2CONFIG_BUILTIN_FLASH;
+	return 0;
+}
diff --git a/board/bytesatwork/baw_config/m2config_builtin.h b/board/bytesatwork/baw_config/m2config_builtin.h
new file mode 100644
index 0000000000..09b59265f4
--- /dev/null
+++ b/board/bytesatwork/baw_config/m2config_builtin.h
@@ -0,0 +1,21 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2015 bytes at work AG
+ */
+
+#ifndef M2CONFIG_BUILTIN_H
+#define M2CONFIG_BUILTIN_H
+
+#include "m2config.h"
+#include <config.h>
+
+#if defined(CONFIG_M2CONFIG_BUILTIN)
+int m2config_builtin(struct m2config *config);
+#else
+static inline int m2config_builtin(struct m2config *config)
+{
+	return -1;
+}
+#endif
+
+#endif
diff --git a/board/bytesatwork/baw_config/m2config_eeprom.c b/board/bytesatwork/baw_config/m2config_eeprom.c
new file mode 100644
index 0000000000..4aebac3c5a
--- /dev/null
+++ b/board/bytesatwork/baw_config/m2config_eeprom.c
@@ -0,0 +1,301 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2015 bytes at work AG
+ */
+
+#include "m2config_eeprom.h"
+
+#include "m2config.h"
+
+#include <common.h>
+#include <dm/uclass.h>
+#include <i2c.h>
+#include <hexdump.h>
+
+#define EEPROM_ADDRESS		0x50
+#define EEPROM_MAXWRITE		64	/* max. page size for writes */
+#define MAGIC			0x6268
+#define EEPROM_EXT_OFFSET	0x14
+#define MAGIC_EXT		0x6235
+#define EEPROM_TRACK_OFFSET	0x3d
+#define MAGIC_TRACK		0x6e4a
+
+struct udevice *m2config_dev, *busp;
+
+struct eeprom_header {
+	u16 magic;
+	u16 length;
+} __packed;
+
+struct eeprom_content {
+	u32	pcb;
+	u32	ram;
+	u32	flash;
+} __packed;
+
+struct eeprom_content_ext {
+	u32	artno;
+	u32	lot;
+	u8		lotseq;
+	char		proddate[12];
+	char		flashdate[6];
+	char		flashuser[6];
+} __packed;
+
+struct eeprom_content_track {
+	char		macaddr[18];
+	char		uid[16];	/* enable use of characters */
+} __packed;
+
+struct eeprom_data {
+	struct eeprom_header	header;
+	struct eeprom_content	content;
+	u32			crc;
+} __packed;
+
+struct eeprom_data_ext {
+	struct eeprom_header		header;
+	u32				crc;
+	struct eeprom_content_ext	content;
+} __packed;
+
+struct eeprom_data_track {
+	struct eeprom_header		header;
+	u32				crc;
+	struct eeprom_content_track	content;
+} __packed;
+
+struct eeprom_write_frame {
+	struct eeprom_data		content;
+	struct eeprom_data_ext		content_ext;
+	struct eeprom_data_track	content_track;
+} __packed;
+
+struct eeprom_read_frame {
+	struct eeprom_data		content;
+	struct eeprom_data_ext		content_ext;
+	struct eeprom_data_track	content_track;
+} __packed;
+
+int m2config_eeprom_init(void)
+{
+#ifdef CONFIG_DM_I2C
+	int ret;
+
+	ret = uclass_get_device_by_seq(UCLASS_I2C, 0, &busp);
+	if (ret)
+		return ret;
+
+	ret = dm_i2c_probe(busp, EEPROM_ADDRESS, 0, &m2config_dev);
+	if (ret)
+		return ret;
+
+	ret = i2c_set_chip_offset_len(m2config_dev, 2);
+	if (ret)
+		return ret;
+
+#endif
+	return 0;
+}
+
+static int i2c_write_rdy(void)
+{
+	/*
+	 * Check if device is ready for write to eeprom. Write can last up to
+	 * 5 ms. Poll with empty write.
+	 */
+	int i, ret = -5;
+	u8 dummy = 0xff; /* i2c_write doesn't like to write NULL pointers */
+
+	for (i = 0; ret < 0 && i < 10; ++i) {
+#ifndef CONFIG_DM_I2C
+		ret = i2c_write(EEPROM_ADDRESS, 0, 2, &dummy, 0);
+#else
+		ret = dm_i2c_write(m2config_dev, 0, &dummy, 0);
+#endif
+		if (ret != 0)
+			udelay(500);
+	}
+
+	if (ret != 0)
+		printf("Error: eeprom busy, giving up.\n");
+
+	return ret;
+}
+
+int i2c_long_write(struct eeprom_write_frame frame, int len)
+{
+	int wlen, ret, off = 0;
+
+	while (len > 0) {
+		if (len >= EEPROM_MAXWRITE)
+			wlen = EEPROM_MAXWRITE;
+		else
+			wlen = len;
+
+		if (i2c_write_rdy() != 0) {
+			ret = -EIO;
+			break;
+		}
+#ifndef CONFIG_DM_I2C
+		ret = i2c_write(EEPROM_ADDRESS, off, 2, (u8 *)(&frame) + off,
+				wlen);
+#else
+		ret = dm_i2c_write(m2config_dev, off, (u8 *)(&frame) + off,
+				   wlen);
+#endif
+
+		if (ret != 0) {
+			ret = -EIO;
+			break;
+		}
+
+		len -= wlen;
+		off += wlen;
+	}
+
+	return ret;
+}
+
+int m2config_eeprom_read(struct m2config *config)
+{
+	struct eeprom_read_frame frame;
+
+#ifndef CONFIG_DM_I2C
+	if (i2c_read(EEPROM_ADDRESS, 0, 2, (u8 *)&frame, sizeof(frame)) != 0)
+		return -3;
+#else
+	if (dm_i2c_read(m2config_dev, 0, (u8 *)&frame, sizeof(frame)))
+		return -12;
+#endif
+
+	if (frame.content.header.magic != MAGIC)
+		return -4;
+
+	if (frame.content.header.length != sizeof(frame.content.content))
+		return -5;
+
+	/* Cast crc32 value to u8 because of legacy code */
+	if (frame.content.crc != (u8)crc32(0, (u8 *)&frame.content.content,
+			sizeof(frame.content.content)))
+		return -6;
+
+	config->pcb    = frame.content.content.pcb;
+	config->ram    = frame.content.content.ram;
+	config->flash  = frame.content.content.flash;
+
+	config->ext_avail = 0;
+	if (frame.content_ext.header.magic != MAGIC_EXT) {
+		printf("ext magic wrong\n");
+		return 0;
+	}
+
+	if (frame.content_ext.header.length != sizeof(frame.content_ext.content)) {
+		printf("ext len wrong\n");
+		return 0;
+	}
+
+	if (frame.content_ext.crc != crc32(0, (u8 *)&frame.content_ext.content,
+			sizeof(frame.content_ext.content))) {
+		printf("ext crc wrong\n");
+		return 0;
+	}
+
+	config->artno = frame.content_ext.content.artno;
+	config->lot = frame.content_ext.content.lot;
+	config->lotseq = frame.content_ext.content.lotseq;
+
+	strlcpy(config->proddate, frame.content_ext.content.proddate,
+		sizeof(config->proddate));
+	strlcpy(config->flashdate, frame.content_ext.content.flashdate,
+		sizeof(config->flashdate));
+	strlcpy(config->flashuser, frame.content_ext.content.flashuser,
+		sizeof(config->flashuser));
+
+	config->ext_avail = 1;
+
+	config->track_avail = 0;
+	if (frame.content_track.header.magic != MAGIC_TRACK) {
+		printf("track magic wrong\n");
+		return 0;
+	}
+
+	if (frame.content_track.header.length !=
+			sizeof(frame.content_track.content)) {
+		printf("track len wrong\n");
+		return 0;
+	}
+
+	if (frame.content_track.crc != crc32(0, (u8 *)&frame.content_track.content,
+			sizeof(frame.content_track.content))) {
+		printf("track crc wrong\n");
+		return 0;
+	}
+
+	strlcpy(config->macaddr, frame.content_track.content.macaddr,
+		sizeof(config->macaddr));
+	strlcpy(config->uid, frame.content_track.content.uid,
+		sizeof(config->uid));
+
+	config->track_avail = 1;
+
+	return 0;
+}
+
+#if defined(CONFIG_SKIP_LOWLEVEL_INIT)
+
+int m2config_eeprom_write(struct m2config *config)
+{
+	struct eeprom_write_frame   frame;
+
+	frame.content.header.magic = MAGIC;
+	frame.content.header.length = sizeof(frame.content.content);
+	frame.content.content.pcb = config->pcb;
+	frame.content.content.ram = config->ram;
+	frame.content.content.flash = config->flash;
+	/* Cast crc32 value to u8 because of legacy code */
+	frame.content.crc = (u8)crc32(0, (const u8 *)&frame.content.content,
+			sizeof(frame.content.content));
+
+	frame.content_ext.header.magic = MAGIC_EXT;
+	frame.content_ext.header.length = sizeof(frame.content_ext.content);
+	frame.content_ext.content.artno = config->artno;
+	frame.content_ext.content.lot = config->lot;
+	frame.content_ext.content.lotseq = config->lotseq;
+	strlcpy(frame.content_ext.content.proddate, config->proddate,
+		sizeof(frame.content_ext.content.proddate));
+	strlcpy(frame.content_ext.content.flashdate, config->flashdate,
+		sizeof(frame.content_ext.content.flashdate));
+	strlcpy(frame.content_ext.content.flashuser, config->flashuser,
+		sizeof(frame.content_ext.content.flashuser));
+	frame.content_ext.crc = crc32(0, (u8 *)&frame.content_ext.content,
+		sizeof(frame.content_ext.content));
+
+	frame.content_track.header.magic = MAGIC_TRACK;
+	frame.content_track.header.length = sizeof(frame.content_track.content);
+	strlcpy(frame.content_track.content.macaddr, config->macaddr,
+		sizeof(frame.content_track.content.macaddr));
+	strlcpy(frame.content_track.content.uid, config->uid,
+		sizeof(frame.content_track.content.uid));
+	frame.content_track.crc = crc32(0, (u8 *)&frame.content_track.content,
+		sizeof(frame.content_track.content));
+
+	if (i2c_long_write(frame, sizeof(frame)) != 0)
+		return -7;
+
+	return 0;
+}
+
+int m2config_eeprom_erase(void)
+{
+	struct eeprom_write_frame   frame;
+
+	memset(&frame, 0xff, sizeof(frame));
+
+	if (i2c_long_write(frame, sizeof(frame)) != 0)
+		return -8;
+
+	return 0;
+}
+
+#endif
diff --git a/board/bytesatwork/baw_config/m2config_eeprom.h b/board/bytesatwork/baw_config/m2config_eeprom.h
new file mode 100644
index 0000000000..8d9e832be2
--- /dev/null
+++ b/board/bytesatwork/baw_config/m2config_eeprom.h
@@ -0,0 +1,37 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2015 bytes at work AG
+ */
+
+#ifndef M2CONFIG_EEPROM_H
+#define M2CONFIG_EEPROM_H
+
+#include "m2config.h"
+#include <config.h>
+
+#if defined(CONFIG_M2CONFIG_EEPROM)
+int m2config_eeprom_read(struct m2config *config);
+int m2config_eeprom_init(void);
+#else
+static inline int m2config_eeprom_read(struct m2config *config)
+{
+	return -1;
+}
+#endif
+
+#if defined(CONFIG_M2CONFIG_EEPROM) && defined(CONFIG_SKIP_LOWLEVEL_INIT)
+int m2config_eeprom_write(struct m2config *config);
+int m2config_eeprom_erase(void);
+#else
+static inline int m2config_eeprom_write(struct m2config *config)
+{
+	return -1;
+}
+
+static inline int m2config_eeprom_erase(void)
+{
+	return -1;
+}
+#endif
+
+#endif
diff --git a/board/bytesatwork/baw_config/m2config_get.c b/board/bytesatwork/baw_config/m2config_get.c
new file mode 100644
index 0000000000..60386ecb89
--- /dev/null
+++ b/board/bytesatwork/baw_config/m2config_get.c
@@ -0,0 +1,45 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2015 bytes at work AG
+ */
+
+#include <asm/arch/ddr_defs.h>
+#include <i2c.h>
+#include "m2config_get.h"
+
+#include "m2config_builtin.h"
+#include "m2config_eeprom.h"
+
+#define PMIC_ADDRESS 0x2D
+
+void m2config_get(struct m2config *config)
+{
+	u8 __attribute__((unused)) reg = 0;
+
+	if (m2config_eeprom_read(config) == 0)
+		return;
+
+#ifdef CONFIG_SPL_BUILD
+	if (i2c_read(PMIC_ADDRESS, 0x20, 1, &reg, 1) != 0) {
+		printf("Error: PMIC read failed\n");
+		goto default_config;
+	} else {
+		if (reg == 0x05) {
+			config->ram = M2_RAM_MT47H128M16RT25E;	/* set DDR2 */
+			printf("DDR2 detected\n");
+		} else if (reg == 0x01) {
+			config->ram = M2_RAM_K4B2G1646EBIH9;	/* set legacy DDR3 */
+			printf("DDR3 detected\n");
+		} else {
+			goto default_config;
+		}
+	}
+
+	return;
+
+default_config:
+#endif
+
+	config->ram = M2_RAM_K4B2G1646EBIH9;	/* set default to legacy DDR3 */
+	printf("Error: no RAM configuration found, trying fallback configuration %u\n", config->ram);
+}
diff --git a/board/bytesatwork/baw_config/m2config_get.h b/board/bytesatwork/baw_config/m2config_get.h
new file mode 100644
index 0000000000..bca128fb05
--- /dev/null
+++ b/board/bytesatwork/baw_config/m2config_get.h
@@ -0,0 +1,13 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2015 bytes at work AG
+ */
+
+#ifndef M2CONFIG_GET_H
+#define M2CONFIG_GET_H
+
+#include "m2config.h"
+
+void m2config_get(struct m2config *config);
+
+#endif
-- 
2.39.2


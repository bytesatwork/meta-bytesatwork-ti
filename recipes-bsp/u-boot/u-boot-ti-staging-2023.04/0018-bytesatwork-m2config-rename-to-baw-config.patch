From 12be25850f7bfed4196d26f12c92eb7b3b35ea89 Mon Sep 17 00:00:00 2001
From: Rico Ganahl <rico.ganahl@bytesatwork.ch>
Date: Tue, 1 Mar 2022 13:20:49 +0100
Subject: [PATCH] bytesatwork: m2config: rename to baw config

Use tool for different modules, so use general name.

Signed-off-by: Rico Ganahl <rico.ganahl@bytesatwork.ch>
(cherry picked from commit 42230a9c177028a71279d41fe1d3eccf0a42f1ac)
---
 board/bytesatwork/baw_config/MAINTAINERS      |   3 +-
 board/bytesatwork/baw_config/README           |  21 ++--
 .../baw_config/{m2config.c => baw_config.c}   |  12 +-
 board/bytesatwork/baw_config/baw_config.h     |  79 +++++++++++++
 .../baw_config/baw_config_builtin.c           |  15 +++
 .../baw_config/baw_config_builtin.h           |  21 ++++
 ...{m2config_eeprom.c => baw_config_eeprom.c} |  89 ++++++++-------
 .../baw_config/baw_config_eeprom.h            |  37 ++++++
 .../{m2config_get.c => baw_config_get.c}      |  10 +-
 board/bytesatwork/baw_config/baw_config_get.h |  13 +++
 .../{cmd_m2config.c => cmd_baw_config.c}      | 105 +++++++++---------
 board/bytesatwork/baw_config/m2config.h       |  79 -------------
 .../bytesatwork/baw_config/m2config_builtin.c |  15 ---
 .../bytesatwork/baw_config/m2config_builtin.h |  21 ----
 .../bytesatwork/baw_config/m2config_eeprom.h  |  37 ------
 board/bytesatwork/baw_config/m2config_get.h   |  13 ---
 16 files changed, 284 insertions(+), 286 deletions(-)
 rename board/bytesatwork/baw_config/{m2config.c => baw_config.c} (74%)
 create mode 100644 board/bytesatwork/baw_config/baw_config.h
 create mode 100644 board/bytesatwork/baw_config/baw_config_builtin.c
 create mode 100644 board/bytesatwork/baw_config/baw_config_builtin.h
 rename board/bytesatwork/baw_config/{m2config_eeprom.c => baw_config_eeprom.c} (79%)
 create mode 100644 board/bytesatwork/baw_config/baw_config_eeprom.h
 rename board/bytesatwork/baw_config/{m2config_get.c => baw_config_get.c} (82%)
 create mode 100644 board/bytesatwork/baw_config/baw_config_get.h
 rename board/bytesatwork/baw_config/{cmd_m2config.c => cmd_baw_config.c} (58%)
 delete mode 100644 board/bytesatwork/baw_config/m2config.h
 delete mode 100644 board/bytesatwork/baw_config/m2config_builtin.c
 delete mode 100644 board/bytesatwork/baw_config/m2config_builtin.h
 delete mode 100644 board/bytesatwork/baw_config/m2config_eeprom.h
 delete mode 100644 board/bytesatwork/baw_config/m2config_get.h

diff --git a/board/bytesatwork/baw_config/MAINTAINERS b/board/bytesatwork/baw_config/MAINTAINERS
index a7c6c2867d..7c764850c5 100644
--- a/board/bytesatwork/baw_config/MAINTAINERS
+++ b/board/bytesatwork/baw_config/MAINTAINERS
@@ -1,5 +1,4 @@
 BYTESATWORK BAWCONFIG
 M:	Rico Ganahl <rico.ganahl@bytesatwork.ch>
 S:	Maintained
-F:	board/bytesatwork/baw_config/*m2config*
-F:	board/bytesatwork/baw_config/README
+F:	board/bytesatwork/baw_config/*
diff --git a/board/bytesatwork/baw_config/README b/board/bytesatwork/baw_config/README
index f82ef75ac3..090ba20ff0 100644
--- a/board/bytesatwork/baw_config/README
+++ b/board/bytesatwork/baw_config/README
@@ -1,23 +1,24 @@
 
 Configuration options:
 
-CONFIG_CMD_M2CONFIG
-If defined, add the u-boot command m2config to read and write the configuration.
+CONFIG_CMD_BAW_CONFIG
+If defined, add the u-boot command bawconfig to read and write the
+configuration.
 
-CONFIG_M2CONFIG_EEPROM
+CONFIG_BAW_CONFIG_EEPROM
 If defined, add method to read (SPL) and write (SPL and u-boot) the
 configuration from the eeprom.
 
-CONFIG_M2CONFIG_BUILTIN
+CONFIG_BAW_CONFIG_BUILTIN
 If defined, add built-in configuration values. Define the following names:
-  M2CONFIG_BUILTIN_PCB
-  M2CONFIG_BUILTIN_RAM
-  M2CONFIG_BUILTIN_FLASH
+  BAW_CONFIG_BUILTIN_PCB
+  BAW_CONFIG_BUILTIN_RAM
+  BAW_CONFIG_BUILTIN_FLASH
 
-If both CONFIG_M2CONFIG_EEPROM and CONFIG_M2CONFIG_BUILTIN are defined, the
-order is defined in m2config_get.
+If both CONFIG_BAW_CONFIG_EEPROM and CONFIG_BAW_CONFIG_BUILTIN are defined, the
+order is defined in baw_config_get.
 
-At least one of CONFIG_M2CONFIG_EEPROM or CONFIG_M2CONFIG_BUILTIN has to be
+At least one of CONFIG_BAW_CONFIG_EEPROM or CONFIG_BAW_CONFIG_BUILTIN has to be
 defined.
 
 
diff --git a/board/bytesatwork/baw_config/m2config.c b/board/bytesatwork/baw_config/baw_config.c
similarity index 74%
rename from board/bytesatwork/baw_config/m2config.c
rename to board/bytesatwork/baw_config/baw_config.c
index 202e888382..b28f302342 100644
--- a/board/bytesatwork/baw_config/m2config.c
+++ b/board/bytesatwork/baw_config/baw_config.c
@@ -3,9 +3,9 @@
  * Copyright (C) 2015 bytes at work AG
  */
 
-#include "m2config.h"
+#include "baw_config.h"
 
-const struct m2config_name_pair m2config_pcb_name[] = {
+const struct baw_config_name_pair baw_config_pcb_name[] = {
 	{ M2_PCB_REV_00, "Rev.00" },
 	{ M2_PCB_REV_01, "Rev.01" },
 	{ M2_PCB_REV_02, "Rev.02" },
@@ -14,7 +14,7 @@ const struct m2config_name_pair m2config_pcb_name[] = {
 	{ -1, NULL },
 };
 
-const struct m2config_name_pair m2config_ram_name[] = {
+const struct baw_config_name_pair baw_config_ram_name[] = {
 	{ M2_RAM_MT47H128M16RT25E, "MT47H128M16RT25E 256 MB DDR2 @ 266MHz" },
 	{ M2_RAM_K4B2G1646EBIH9,   "K4B2G1646EBIH9 legacy DDR3 @ 303MHz" },
 	{ M2_RAM_K4B2G1646QBCK0,   "K4B2G1646QBCK0 256 MB DDR3 @ 400Mhz" },
@@ -23,7 +23,7 @@ const struct m2config_name_pair m2config_ram_name[] = {
 	{ -1, NULL },
 };
 
-const struct m2config_name_pair m2config_flash_name[] = {
+const struct baw_config_name_pair baw_config_flash_name[] = {
 	{ M2_NAND_2GBIT, "Nand 2 GBit" },
 	{ M2_NAND_4GBIT, "Nand 4 GBit" },
 	{ M2_EMMC_4GB, "EMMC 4 GB" },
@@ -33,9 +33,9 @@ const struct m2config_name_pair m2config_flash_name[] = {
 	{ -1, NULL },
 };
 
-const char *m2config_get_name(u32 config, const struct m2config_name_pair *map)
+const char *baw_config_get_name(u32 config, const struct baw_config_name_pair *map)
 {
-	const struct m2config_name_pair *itr;
+	const struct baw_config_name_pair *itr;
 
 	for (itr = map; itr->name; itr++)
 		if (itr->config == config)
diff --git a/board/bytesatwork/baw_config/baw_config.h b/board/bytesatwork/baw_config/baw_config.h
new file mode 100644
index 0000000000..0bc76496b5
--- /dev/null
+++ b/board/bytesatwork/baw_config/baw_config.h
@@ -0,0 +1,79 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * Copyright (C) 2015 bytes at work AG
+ */
+
+#ifndef BAW_CONFIG_H
+#define BAW_CONFIG_H
+
+#include <config.h>
+#include <linux/types.h>
+
+typedef enum {
+	M2_PCB_REV_00 = 0,
+	M2_PCB_REV_01 = 1,
+	M2_PCB_REV_02 = 2,
+	M2_PCB_REV_03 = 3,
+	M2_PCB_REV_04 = 4,
+} baw_config_pcb_t;
+
+typedef enum {
+	M2_RAM_MT47H128M16RT25E = 1,
+	M2_RAM_K4B2G1646EBIH9   = 2,
+	M2_RAM_K4B2G1646QBCK0   = 3,
+	M2_RAM_K4B4G1646DBIK0   = 4,
+	M2_RAM_MT41K512M16HA107 = 5,
+} baw_config_ram_t;
+
+typedef enum {
+	M2_NAND_2GBIT  = 0,
+	M2_NAND_4GBIT  = 1,
+	M2_EMMC_4GB  = 2,
+	M2_EMMC_8GB  = 3,
+	M2_EMMC_16GB = 4,
+	M2_EMMC_32GB = 5,
+} baw_config_flash_t;
+
+struct baw_config {
+	baw_config_pcb_t pcb;
+	baw_config_ram_t ram;
+	baw_config_flash_t flash;
+	bool ext_avail;
+	u32 artno;
+	u32 lot;
+	u8 lotseq;
+	char proddate[12];
+	char flashdate[6];
+	char flashuser[6];
+	bool track_avail;
+	char macaddr[18];
+	char uid[16];
+};
+
+struct baw_config_name_pair {
+	u32 config;
+	const char *name;
+};
+
+extern const struct baw_config_name_pair baw_config_pcb_name[];
+extern const struct baw_config_name_pair baw_config_ram_name[];
+extern const struct baw_config_name_pair baw_config_flash_name[];
+
+const char *baw_config_get_name(u32 config, const struct baw_config_name_pair *map);
+
+static inline const char *baw_config_get_pcb_name(baw_config_pcb_t config)
+{
+	return baw_config_get_name(config, baw_config_pcb_name);
+}
+
+static inline const char *baw_config_get_ram_name(baw_config_ram_t config)
+{
+	return baw_config_get_name(config, baw_config_ram_name);
+}
+
+static inline const char *baw_config_get_flash_name(baw_config_flash_t config)
+{
+	return baw_config_get_name(config, baw_config_flash_name);
+}
+
+#endif
diff --git a/board/bytesatwork/baw_config/baw_config_builtin.c b/board/bytesatwork/baw_config/baw_config_builtin.c
new file mode 100644
index 0000000000..7603d3de94
--- /dev/null
+++ b/board/bytesatwork/baw_config/baw_config_builtin.c
@@ -0,0 +1,15 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2015 bytes at work AG
+ */
+
+#include "baw_config.h"
+#include <config.h>
+
+int baw_config_builtin(struct baw_config *config)
+{
+	config->pcb    = BAW_CONFIG_BUILTIN_PCB;
+	config->ram    = BAW_CONFIG_BUILTIN_RAM;
+	config->flash  = BAW_CONFIG_BUILTIN_FLASH;
+	return 0;
+}
diff --git a/board/bytesatwork/baw_config/baw_config_builtin.h b/board/bytesatwork/baw_config/baw_config_builtin.h
new file mode 100644
index 0000000000..bfed857d08
--- /dev/null
+++ b/board/bytesatwork/baw_config/baw_config_builtin.h
@@ -0,0 +1,21 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * Copyright (C) 2015 bytes at work AG
+ */
+
+#ifndef BAW_CONFIG_BUILTIN_H
+#define BAW_CONFIG_BUILTIN_H
+
+#include "baw_config.h"
+#include <config.h>
+
+#if defined(CONFIG_BAW_CONFIG_BUILTIN)
+int baw_config_builtin(struct baw_config *config);
+#else
+static inline int baw_config_builtin(struct baw_config *config)
+{
+	return -1;
+}
+#endif
+
+#endif
diff --git a/board/bytesatwork/baw_config/m2config_eeprom.c b/board/bytesatwork/baw_config/baw_config_eeprom.c
similarity index 79%
rename from board/bytesatwork/baw_config/m2config_eeprom.c
rename to board/bytesatwork/baw_config/baw_config_eeprom.c
index 4aebac3c5a..8198109a7b 100644
--- a/board/bytesatwork/baw_config/m2config_eeprom.c
+++ b/board/bytesatwork/baw_config/baw_config_eeprom.c
@@ -3,9 +3,8 @@
  * Copyright (C) 2015 bytes at work AG
  */
 
-#include "m2config_eeprom.h"
-
-#include "m2config.h"
+#include "baw_config_eeprom.h"
+#include "baw_config.h"
 
 #include <common.h>
 #include <dm/uclass.h>
@@ -20,7 +19,7 @@
 #define EEPROM_TRACK_OFFSET	0x3d
 #define MAGIC_TRACK		0x6e4a
 
-struct udevice *m2config_dev, *busp;
+struct udevice *baw_config_dev, *busp;
 
 struct eeprom_header {
 	u16 magic;
@@ -28,56 +27,56 @@ struct eeprom_header {
 } __packed;
 
 struct eeprom_content {
-	u32	pcb;
-	u32	ram;
-	u32	flash;
+	u32 pcb;
+	u32 ram;
+	u32 flash;
 } __packed;
 
 struct eeprom_content_ext {
-	u32	artno;
-	u32	lot;
-	u8		lotseq;
-	char		proddate[12];
-	char		flashdate[6];
-	char		flashuser[6];
+	u32 artno;
+	u32 lot;
+	u8 lotseq;
+	char proddate[12];
+	char flashdate[6];
+	char flashuser[6];
 } __packed;
 
 struct eeprom_content_track {
-	char		macaddr[18];
-	char		uid[16];	/* enable use of characters */
+	char macaddr[18];
+	char uid[16];	/* enable use of characters */
 } __packed;
 
 struct eeprom_data {
-	struct eeprom_header	header;
-	struct eeprom_content	content;
-	u32			crc;
+	struct eeprom_header header;
+	struct eeprom_content content;
+	u32 crc;
 } __packed;
 
 struct eeprom_data_ext {
-	struct eeprom_header		header;
-	u32				crc;
-	struct eeprom_content_ext	content;
+	struct eeprom_header header;
+	u32 crc;
+	struct eeprom_content_ext content;
 } __packed;
 
 struct eeprom_data_track {
-	struct eeprom_header		header;
-	u32				crc;
-	struct eeprom_content_track	content;
+	struct eeprom_header header;
+	u32 crc;
+	struct eeprom_content_track content;
 } __packed;
 
 struct eeprom_write_frame {
-	struct eeprom_data		content;
-	struct eeprom_data_ext		content_ext;
-	struct eeprom_data_track	content_track;
+	struct eeprom_data content;
+	struct eeprom_data_ext content_ext;
+	struct eeprom_data_track content_track;
 } __packed;
 
 struct eeprom_read_frame {
-	struct eeprom_data		content;
-	struct eeprom_data_ext		content_ext;
-	struct eeprom_data_track	content_track;
+	struct eeprom_data content;
+	struct eeprom_data_ext content_ext;
+	struct eeprom_data_track content_track;
 } __packed;
 
-int m2config_eeprom_init(void)
+int baw_config_eeprom_init(void)
 {
 #ifdef CONFIG_DM_I2C
 	int ret;
@@ -86,11 +85,11 @@ int m2config_eeprom_init(void)
 	if (ret)
 		return ret;
 
-	ret = dm_i2c_probe(busp, EEPROM_ADDRESS, 0, &m2config_dev);
+	ret = dm_i2c_probe(busp, EEPROM_ADDRESS, 0, &baw_config_dev);
 	if (ret)
 		return ret;
 
-	ret = i2c_set_chip_offset_len(m2config_dev, 2);
+	ret = i2c_set_chip_offset_len(baw_config_dev, 2);
 	if (ret)
 		return ret;
 
@@ -111,7 +110,7 @@ static int i2c_write_rdy(void)
 #ifndef CONFIG_DM_I2C
 		ret = i2c_write(EEPROM_ADDRESS, 0, 2, &dummy, 0);
 #else
-		ret = dm_i2c_write(m2config_dev, 0, &dummy, 0);
+		ret = dm_i2c_write(baw_config_dev, 0, &dummy, 0);
 #endif
 		if (ret != 0)
 			udelay(500);
@@ -141,7 +140,7 @@ int i2c_long_write(struct eeprom_write_frame frame, int len)
 		ret = i2c_write(EEPROM_ADDRESS, off, 2, (u8 *)(&frame) + off,
 				wlen);
 #else
-		ret = dm_i2c_write(m2config_dev, off, (u8 *)(&frame) + off,
+		ret = dm_i2c_write(baw_config_dev, off, (u8 *)(&frame) + off,
 				   wlen);
 #endif
 
@@ -157,7 +156,7 @@ int i2c_long_write(struct eeprom_write_frame frame, int len)
 	return ret;
 }
 
-int m2config_eeprom_read(struct m2config *config)
+int baw_config_eeprom_read(struct baw_config *config)
 {
 	struct eeprom_read_frame frame;
 
@@ -165,7 +164,7 @@ int m2config_eeprom_read(struct m2config *config)
 	if (i2c_read(EEPROM_ADDRESS, 0, 2, (u8 *)&frame, sizeof(frame)) != 0)
 		return -3;
 #else
-	if (dm_i2c_read(m2config_dev, 0, (u8 *)&frame, sizeof(frame)))
+	if (dm_i2c_read(baw_config_dev, 0, (u8 *)&frame, sizeof(frame)))
 		return -12;
 #endif
 
@@ -177,7 +176,7 @@ int m2config_eeprom_read(struct m2config *config)
 
 	/* Cast crc32 value to u8 because of legacy code */
 	if (frame.content.crc != (u8)crc32(0, (u8 *)&frame.content.content,
-			sizeof(frame.content.content)))
+					   sizeof(frame.content.content)))
 		return -6;
 
 	config->pcb    = frame.content.content.pcb;
@@ -196,7 +195,7 @@ int m2config_eeprom_read(struct m2config *config)
 	}
 
 	if (frame.content_ext.crc != crc32(0, (u8 *)&frame.content_ext.content,
-			sizeof(frame.content_ext.content))) {
+					   sizeof(frame.content_ext.content))) {
 		printf("ext crc wrong\n");
 		return 0;
 	}
@@ -227,7 +226,7 @@ int m2config_eeprom_read(struct m2config *config)
 	}
 
 	if (frame.content_track.crc != crc32(0, (u8 *)&frame.content_track.content,
-			sizeof(frame.content_track.content))) {
+					     sizeof(frame.content_track.content))) {
 		printf("track crc wrong\n");
 		return 0;
 	}
@@ -244,7 +243,7 @@ int m2config_eeprom_read(struct m2config *config)
 
 #if defined(CONFIG_SKIP_LOWLEVEL_INIT)
 
-int m2config_eeprom_write(struct m2config *config)
+int baw_config_eeprom_write(struct baw_config *config)
 {
 	struct eeprom_write_frame   frame;
 
@@ -255,7 +254,7 @@ int m2config_eeprom_write(struct m2config *config)
 	frame.content.content.flash = config->flash;
 	/* Cast crc32 value to u8 because of legacy code */
 	frame.content.crc = (u8)crc32(0, (const u8 *)&frame.content.content,
-			sizeof(frame.content.content));
+				      sizeof(frame.content.content));
 
 	frame.content_ext.header.magic = MAGIC_EXT;
 	frame.content_ext.header.length = sizeof(frame.content_ext.content);
@@ -269,7 +268,7 @@ int m2config_eeprom_write(struct m2config *config)
 	strlcpy(frame.content_ext.content.flashuser, config->flashuser,
 		sizeof(frame.content_ext.content.flashuser));
 	frame.content_ext.crc = crc32(0, (u8 *)&frame.content_ext.content,
-		sizeof(frame.content_ext.content));
+				      sizeof(frame.content_ext.content));
 
 	frame.content_track.header.magic = MAGIC_TRACK;
 	frame.content_track.header.length = sizeof(frame.content_track.content);
@@ -278,7 +277,7 @@ int m2config_eeprom_write(struct m2config *config)
 	strlcpy(frame.content_track.content.uid, config->uid,
 		sizeof(frame.content_track.content.uid));
 	frame.content_track.crc = crc32(0, (u8 *)&frame.content_track.content,
-		sizeof(frame.content_track.content));
+					sizeof(frame.content_track.content));
 
 	if (i2c_long_write(frame, sizeof(frame)) != 0)
 		return -7;
@@ -286,7 +285,7 @@ int m2config_eeprom_write(struct m2config *config)
 	return 0;
 }
 
-int m2config_eeprom_erase(void)
+int baw_config_eeprom_erase(void)
 {
 	struct eeprom_write_frame   frame;
 
diff --git a/board/bytesatwork/baw_config/baw_config_eeprom.h b/board/bytesatwork/baw_config/baw_config_eeprom.h
new file mode 100644
index 0000000000..d5ad65082b
--- /dev/null
+++ b/board/bytesatwork/baw_config/baw_config_eeprom.h
@@ -0,0 +1,37 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * Copyright (C) 2015 bytes at work AG
+ */
+
+#ifndef BAW_CONFIG_EEPROM_H
+#define BAW_CONFIG_EEPROM_H
+
+#include "baw_config.h"
+#include <config.h>
+
+#if defined(CONFIG_BAW_CONFIG_EEPROM)
+int baw_config_eeprom_read(struct baw_config *config);
+int baw_config_eeprom_init(void);
+#else
+static inline int baw_config_eeprom_read(struct baw_config *config)
+{
+	return -1;
+}
+#endif
+
+#if defined(CONFIG_BAW_CONFIG_EEPROM) && defined(CONFIG_SKIP_LOWLEVEL_INIT)
+int baw_config_eeprom_write(struct baw_config *config);
+int baw_config_eeprom_erase(void);
+#else
+static inline int baw_config_eeprom_write(struct baw_config *config)
+{
+	return -1;
+}
+
+static inline int baw_config_eeprom_erase(void)
+{
+	return -1;
+}
+#endif
+
+#endif
diff --git a/board/bytesatwork/baw_config/m2config_get.c b/board/bytesatwork/baw_config/baw_config_get.c
similarity index 82%
rename from board/bytesatwork/baw_config/m2config_get.c
rename to board/bytesatwork/baw_config/baw_config_get.c
index 60386ecb89..d2894e6cc4 100644
--- a/board/bytesatwork/baw_config/m2config_get.c
+++ b/board/bytesatwork/baw_config/baw_config_get.c
@@ -5,18 +5,18 @@
 
 #include <asm/arch/ddr_defs.h>
 #include <i2c.h>
-#include "m2config_get.h"
+#include "baw_config_get.h"
 
-#include "m2config_builtin.h"
-#include "m2config_eeprom.h"
+#include "baw_config_builtin.h"
+#include "baw_config_eeprom.h"
 
 #define PMIC_ADDRESS 0x2D
 
-void m2config_get(struct m2config *config)
+void baw_config_get(struct baw_config *config)
 {
 	u8 __attribute__((unused)) reg = 0;
 
-	if (m2config_eeprom_read(config) == 0)
+	if (baw_config_eeprom_read(config) == 0)
 		return;
 
 #ifdef CONFIG_SPL_BUILD
diff --git a/board/bytesatwork/baw_config/baw_config_get.h b/board/bytesatwork/baw_config/baw_config_get.h
new file mode 100644
index 0000000000..f19edc9be3
--- /dev/null
+++ b/board/bytesatwork/baw_config/baw_config_get.h
@@ -0,0 +1,13 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * Copyright (C) 2015 bytes at work AG
+ */
+
+#ifndef BAW_CONFIG_GET_H
+#define BAW_CONFIG_GET_H
+
+#include "baw_config.h"
+
+void baw_config_get(struct baw_config *config);
+
+#endif
diff --git a/board/bytesatwork/baw_config/cmd_m2config.c b/board/bytesatwork/baw_config/cmd_baw_config.c
similarity index 58%
rename from board/bytesatwork/baw_config/cmd_m2config.c
rename to board/bytesatwork/baw_config/cmd_baw_config.c
index e1bfdedc31..2cff981a92 100644
--- a/board/bytesatwork/baw_config/cmd_m2config.c
+++ b/board/bytesatwork/baw_config/cmd_baw_config.c
@@ -6,17 +6,17 @@
 #include <common.h>
 #include <command.h>
 #include <post.h>
-#include "m2config_builtin.h"
-#include "m2config_eeprom.h"
+#include "baw_config_builtin.h"
+#include "baw_config_eeprom.h"
 
-static void print_config(const struct m2config *config)
+static void print_config(const struct baw_config *config)
 {
 	printf("PCB:   %u (%s)\n", config->pcb,
-	       m2config_get_pcb_name(config->pcb));
+	       baw_config_get_pcb_name(config->pcb));
 	printf("RAM:   %u (%s)\n", config->ram,
-	       m2config_get_ram_name(config->ram));
+	       baw_config_get_ram_name(config->ram));
 	printf("Flash: %u (%s)\n", config->flash,
-	       m2config_get_flash_name(config->flash));
+	       baw_config_get_flash_name(config->flash));
 
 	if (config->ext_avail == 1) {
 		printf("\n");
@@ -34,15 +34,15 @@ static void print_config(const struct m2config *config)
 	}
 }
 
-#if defined(CONFIG_M2CONFIG_BUILTIN)
+#if defined(CONFIG_BAW_CONFIG_BUILTIN)
 static enum command_ret_t cmd_builtin(int argc, char * const argv[])
 {
-	struct m2config config;
+	struct baw_config config;
 
 	if (argc != 0)
 		return CMD_RET_USAGE;
 
-	if (m2config_builtin(&config) != 0) {
+	if (baw_config_builtin(&config) != 0) {
 		printf("could not get built-in configuration\n");
 		return CMD_RET_FAILURE;
 	}
@@ -53,16 +53,16 @@ static enum command_ret_t cmd_builtin(int argc, char * const argv[])
 }
 #endif
 
-#if defined(CONFIG_M2CONFIG_EEPROM)
+#if defined(CONFIG_BAW_CONFIG_EEPROM)
 static enum command_ret_t cmd_read(int argc, char * const argv[])
 {
-	struct m2config config;
+	struct baw_config config;
 	int ret;
 
 	if (argc != 0)
 		return CMD_RET_USAGE;
 
-	ret = m2config_eeprom_read(&config);
+	ret = baw_config_eeprom_read(&config);
 	if (ret != 0)
 		printf("no configuration in eeprom: %i\n", ret);
 	else
@@ -73,7 +73,7 @@ static enum command_ret_t cmd_read(int argc, char * const argv[])
 
 static enum command_ret_t cmd_write(int argc, char * const argv[])
 {
-	struct m2config config;
+	struct baw_config config;
 
 	if (argc != 11)
 		return CMD_RET_USAGE;
@@ -92,7 +92,7 @@ static enum command_ret_t cmd_write(int argc, char * const argv[])
 	strlcpy(config.macaddr, argv[9], sizeof(config.macaddr));
 	strlcpy(config.uid, argv[10], sizeof(config.uid));
 
-	if (m2config_eeprom_write(&config) != 0) {
+	if (baw_config_eeprom_write(&config) != 0) {
 		printf("could not write to EEPROM\n");
 		return CMD_RET_FAILURE;
 	}
@@ -105,7 +105,7 @@ static enum command_ret_t cmd_erase(int argc, char * const argv[])
 	if (argc != 0)
 		return CMD_RET_USAGE;
 
-	if (m2config_eeprom_erase() != 0) {
+	if (baw_config_eeprom_erase() != 0) {
 		printf("could not erase configuration\n");
 		return CMD_RET_FAILURE;
 	}
@@ -113,20 +113,20 @@ static enum command_ret_t cmd_erase(int argc, char * const argv[])
 	return CMD_RET_SUCCESS;
 }
 
-#if defined(CONFIG_M2CONFIG_BUILTIN)
+#if defined(CONFIG_BAW_CONFIG_BUILTIN)
 static enum command_ret_t cmd_builtin2eeprom(int argc, char * const argv[])
 {
-	struct m2config config;
+	struct baw_config config;
 
 	if (argc != 0)
 		return CMD_RET_USAGE;
 
-	if (m2config_builtin(&config) != 0) {
+	if (baw_config_builtin(&config) != 0) {
 		printf("could not get built-in configuration\n");
 		return CMD_RET_FAILURE;
 	}
 
-	if (m2config_eeprom_write(&config) != 0) {
+	if (baw_config_eeprom_write(&config) != 0) {
 		printf("could not write to EEPROM\n");
 		return CMD_RET_FAILURE;
 	}
@@ -136,62 +136,62 @@ static enum command_ret_t cmd_builtin2eeprom(int argc, char * const argv[])
 #endif
 #endif
 
-struct m2config_cmd_struct {
-		char  *name;
-		enum command_ret_t (*func)(int argc, char * const argv[]);
+struct baw_config_cmd_struct {
+	char *name;
+	enum command_ret_t (*func)(int argc, char * const argv[]);
 };
 
-static const struct m2config_cmd_struct m2config_cmd[] = {
-#if defined(CONFIG_M2CONFIG_BUILTIN)
+static const struct baw_config_cmd_struct baw_config_cmd[] = {
+#if defined(CONFIG_BAW_CONFIG_BUILTIN)
 	{ "builtin", cmd_builtin },
 #endif
-#if defined(CONFIG_M2CONFIG_EEPROM)
+#if defined(CONFIG_BAW_CONFIG_EEPROM)
 	{ "read", cmd_read },
 	{ "erase", cmd_erase },
 	{ "write", cmd_write },
-#if defined(CONFIG_M2CONFIG_BUILTIN)
+#if defined(CONFIG_BAW_CONFIG_BUILTIN)
 	{ "builtin2eeprom", cmd_builtin2eeprom },
 #endif
 #endif
 	{ NULL, NULL }
 };
 
-static const struct m2config_cmd_struct *get_cmd(const char *name)
+static const struct baw_config_cmd_struct *get_cmd(const char *name)
 {
-	const struct m2config_cmd_struct *cmd;
+	const struct baw_config_cmd_struct *cmd;
 
-	for (cmd = m2config_cmd; cmd->name; cmd++)
+	for (cmd = baw_config_cmd; cmd->name; cmd++)
 		if (strcmp(name, cmd->name) == 0)
 			return cmd;
 
 	return NULL;
 }
 
-static void print_config_names(const struct m2config_name_pair *map)
+static void print_config_names(const struct baw_config_name_pair *map)
 {
-	const struct m2config_name_pair *itr;
+	const struct baw_config_name_pair *itr;
 
 	for (itr = map; itr->name; itr++)
-		printf("  %u (%s)\n", itr->config, itr->name);
+		printf("  %2u (%s)\n", itr->config, itr->name);
 }
 
 static enum command_ret_t print_configurations(void)
 {
 	printf("PCB:\n");
-	print_config_names(m2config_pcb_name);
+	print_config_names(baw_config_pcb_name);
 	printf("RAM:\n");
-	print_config_names(m2config_ram_name);
+	print_config_names(baw_config_ram_name);
 	printf("Flash:\n");
-	print_config_names(m2config_flash_name);
+	print_config_names(baw_config_flash_name);
 
 	return CMD_RET_SUCCESS;
 }
 
-enum command_ret_t do_m2config(cmd_tbl_t *cmdtp, int flag, int argc,
-			       char * const argv[])
+enum command_ret_t do_baw_config(cmd_tbl_t *cmdtp, int flag, int argc,
+				 char * const argv[])
 {
 	if (argc >= 2) {
-		const struct m2config_cmd_struct *cmd = get_cmd(argv[1]);
+		const struct baw_config_cmd_struct *cmd = get_cmd(argv[1]);
 
 		if (cmd)
 			return cmd->func(argc - 2, &argv[2]);
@@ -202,22 +202,21 @@ enum command_ret_t do_m2config(cmd_tbl_t *cmdtp, int flag, int argc,
 	return print_configurations();
 }
 
-U_BOOT_CMD(
-	m2config, 13, 0, do_m2config,
-	"perform m2 configuration",
-	"- list known configuration values\n"
-#if defined(CONFIG_M2CONFIG_BUILTIN)
-	"builtin  - print built-in configuration from u-boot\n"
+U_BOOT_CMD(bawconfig, 13, 0, do_baw_config,
+	   "perform baw module configuration",
+	   "- list known configuration values\n"
+#if defined(CONFIG_BAW_CONFIG_BUILTIN)
+	   "builtin  - print built-in configuration from u-boot\n"
 #endif
-#if defined(CONFIG_M2CONFIG_EEPROM)
-	"read     - read configuration from EEPROM\n"
-	"erase    - erase configuration from EEPROM\n"
-	"write <PCB> <RAM> <Flash> <Article number> <Lot> <Lot sequence number>\n"
-	"      <Production date> <Flash date> <Flash user> <MAC address> <UID>\n"
-	"         - write configuration to EEPROM\n"
-#if defined(CONFIG_M2CONFIG_BUILTIN)
-	"builtin2eeprom\n"
-	"         - write built-in configuration to EEPROM\n"
+#if defined(CONFIG_BAW_CONFIG_EEPROM)
+	   "read     - read configuration from EEPROM\n"
+	   "erase    - erase configuration from EEPROM\n"
+	   "write <PCB> <RAM> <Flash> <Article number> <Lot> <Lot sequence number>\n"
+	   "      <Production date> <Flash date> <Flash user> <MAC address> <UID>\n"
+	   "         - write configuration to EEPROM\n"
+#if defined(CONFIG_BAW_CONFIG_BUILTIN)
+	   "builtin2eeprom\n"
+	   "         - write built-in configuration to EEPROM\n"
 #endif
 #endif
 );
diff --git a/board/bytesatwork/baw_config/m2config.h b/board/bytesatwork/baw_config/m2config.h
deleted file mode 100644
index 4ef104b379..0000000000
--- a/board/bytesatwork/baw_config/m2config.h
+++ /dev/null
@@ -1,79 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0+
-/*
- * Copyright (C) 2015 bytes at work AG
- */
-
-#ifndef M2CONFIG_H
-#define M2CONFIG_H
-
-#include <config.h>
-#include <linux/types.h>
-
-typedef enum {
-	M2_PCB_REV_00 = 0,
-	M2_PCB_REV_01 = 1,
-	M2_PCB_REV_02 = 2,
-	M2_PCB_REV_03 = 3,
-	M2_PCB_REV_04 = 4,
-} m2config_pcb_t;
-
-typedef enum {
-	M2_RAM_MT47H128M16RT25E = 1,
-	M2_RAM_K4B2G1646EBIH9   = 2,
-	M2_RAM_K4B2G1646QBCK0   = 3,
-	M2_RAM_K4B4G1646DBIK0   = 4,
-	M2_RAM_MT41K512M16HA107 = 5,
-} m2config_ram_t;
-
-typedef enum {
-	M2_NAND_2GBIT  = 0,
-	M2_NAND_4GBIT  = 1,
-	M2_EMMC_4GB  = 2,
-	M2_EMMC_8GB  = 3,
-	M2_EMMC_16GB = 4,
-	M2_EMMC_32GB = 5,
-} m2config_flash_t;
-
-struct m2config {
-	m2config_pcb_t		pcb;
-	m2config_ram_t		ram;
-	m2config_flash_t	flash;
-	bool			ext_avail;
-	u32		artno;
-	u32		lot;
-	u8			lotseq;
-	char			proddate[12];
-	char			flashdate[6];
-	char			flashuser[6];
-	bool			track_avail;
-	char			macaddr[18];
-	char			uid[16];
-};
-
-struct m2config_name_pair {
-	u32	config;
-	const char	*name;
-};
-
-extern const struct m2config_name_pair m2config_pcb_name[];
-extern const struct m2config_name_pair m2config_ram_name[];
-extern const struct m2config_name_pair m2config_flash_name[];
-
-const char *m2config_get_name(u32 config, const struct m2config_name_pair *map);
-
-static inline const char *m2config_get_pcb_name(m2config_pcb_t config)
-{
-	return m2config_get_name(config, m2config_pcb_name);
-}
-
-static inline const char *m2config_get_ram_name(m2config_ram_t config)
-{
-	return m2config_get_name(config, m2config_ram_name);
-}
-
-static inline const char *m2config_get_flash_name(m2config_flash_t config)
-{
-	return m2config_get_name(config, m2config_flash_name);
-}
-
-#endif
diff --git a/board/bytesatwork/baw_config/m2config_builtin.c b/board/bytesatwork/baw_config/m2config_builtin.c
deleted file mode 100644
index ccce010797..0000000000
--- a/board/bytesatwork/baw_config/m2config_builtin.c
+++ /dev/null
@@ -1,15 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0+
-/*
- * Copyright (C) 2015 bytes at work AG
- */
-
-#include "m2config.h"
-#include <config.h>
-
-int m2config_builtin(struct m2config *config)
-{
-	config->pcb    = M2CONFIG_BUILTIN_PCB;
-	config->ram    = M2CONFIG_BUILTIN_RAM;
-	config->flash  = M2CONFIG_BUILTIN_FLASH;
-	return 0;
-}
diff --git a/board/bytesatwork/baw_config/m2config_builtin.h b/board/bytesatwork/baw_config/m2config_builtin.h
deleted file mode 100644
index 09b59265f4..0000000000
--- a/board/bytesatwork/baw_config/m2config_builtin.h
+++ /dev/null
@@ -1,21 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0+
-/*
- * Copyright (C) 2015 bytes at work AG
- */
-
-#ifndef M2CONFIG_BUILTIN_H
-#define M2CONFIG_BUILTIN_H
-
-#include "m2config.h"
-#include <config.h>
-
-#if defined(CONFIG_M2CONFIG_BUILTIN)
-int m2config_builtin(struct m2config *config);
-#else
-static inline int m2config_builtin(struct m2config *config)
-{
-	return -1;
-}
-#endif
-
-#endif
diff --git a/board/bytesatwork/baw_config/m2config_eeprom.h b/board/bytesatwork/baw_config/m2config_eeprom.h
deleted file mode 100644
index 8d9e832be2..0000000000
--- a/board/bytesatwork/baw_config/m2config_eeprom.h
+++ /dev/null
@@ -1,37 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0+
-/*
- * Copyright (C) 2015 bytes at work AG
- */
-
-#ifndef M2CONFIG_EEPROM_H
-#define M2CONFIG_EEPROM_H
-
-#include "m2config.h"
-#include <config.h>
-
-#if defined(CONFIG_M2CONFIG_EEPROM)
-int m2config_eeprom_read(struct m2config *config);
-int m2config_eeprom_init(void);
-#else
-static inline int m2config_eeprom_read(struct m2config *config)
-{
-	return -1;
-}
-#endif
-
-#if defined(CONFIG_M2CONFIG_EEPROM) && defined(CONFIG_SKIP_LOWLEVEL_INIT)
-int m2config_eeprom_write(struct m2config *config);
-int m2config_eeprom_erase(void);
-#else
-static inline int m2config_eeprom_write(struct m2config *config)
-{
-	return -1;
-}
-
-static inline int m2config_eeprom_erase(void)
-{
-	return -1;
-}
-#endif
-
-#endif
diff --git a/board/bytesatwork/baw_config/m2config_get.h b/board/bytesatwork/baw_config/m2config_get.h
deleted file mode 100644
index bca128fb05..0000000000
--- a/board/bytesatwork/baw_config/m2config_get.h
+++ /dev/null
@@ -1,13 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0+
-/*
- * Copyright (C) 2015 bytes at work AG
- */
-
-#ifndef M2CONFIG_GET_H
-#define M2CONFIG_GET_H
-
-#include "m2config.h"
-
-void m2config_get(struct m2config *config);
-
-#endif
-- 
2.39.2


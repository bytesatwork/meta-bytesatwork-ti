From d93f6db37d17d0ce0869c86ab506882f39994f39 Mon Sep 17 00:00:00 2001
From: Daniel Ammann <daniel.ammann@bytesatwork.ch>
Date: Wed, 12 Aug 2020 15:22:03 +0200
Subject: [PATCH] ARM: dts: Add support for byteDEVKIT AM353x

Only eMMC variants are supported.

Note: USB doesn't work yet.
---
 arch/arm/boot/dts/am335x-bytedevkit.dts  |  13 ++
 arch/arm/boot/dts/am335x-bytedevkit.dtsi | 102 +++++++++++++
 arch/arm/boot/dts/am335x-byteengine.dtsi | 179 +++++++++++++++++++++++
 3 files changed, 294 insertions(+)
 create mode 100644 arch/arm/boot/dts/am335x-bytedevkit.dts
 create mode 100644 arch/arm/boot/dts/am335x-bytedevkit.dtsi
 create mode 100644 arch/arm/boot/dts/am335x-byteengine.dtsi

diff --git a/arch/arm/boot/dts/am335x-bytedevkit.dts b/arch/arm/boot/dts/am335x-bytedevkit.dts
new file mode 100644
index 000000000000..16a0d30ba757
--- /dev/null
+++ b/arch/arm/boot/dts/am335x-bytedevkit.dts
@@ -0,0 +1,13 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Copyright (C) 2020 bytesatwork AG - https://www.bytesatwork.io
+ */
+
+/dts-v1/;
+
+#include "am335x-bytedevkit.dtsi"
+
+/ {
+	model = "byteDEVKIT with byteENGINE AM335x";
+	compatible = "batw,bytedevkit-am335x", "batw,am335x", "ti,am33xx";
+};
diff --git a/arch/arm/boot/dts/am335x-bytedevkit.dtsi b/arch/arm/boot/dts/am335x-bytedevkit.dtsi
new file mode 100644
index 000000000000..f86f7864136a
--- /dev/null
+++ b/arch/arm/boot/dts/am335x-bytedevkit.dtsi
@@ -0,0 +1,102 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Copyright (C) 2020 bytesatwork AG - https://www.bytesatwork.io
+ */
+
+#include "am335x-byteengine.dtsi"
+
+/ {
+	model = "byteDEVKIT with byteENGINE AM335x";
+	compatible = "batw,bytedevkit-am335x", "batw,am335x", "ti,am33xx";
+};
+
+&am33xx_pinmux {
+	uart0_pins: pinmux_uart0_pins {
+		pinctrl-single,pins = <
+			PIN_UART0_RXD	(MUX_MODE0 | PIN_INPUT_PULLUP)
+			PIN_UART0_TXD	(MUX_MODE0 | PIN_OUTPUT_PULLDOWN)
+		>;
+	};
+
+	cpsw_default: pinmux_cpsw_default {
+		pinctrl-single,pins = <
+			PIN_MII1_TX_EN	(PIN_OUTPUT | MUX_MODE2)	/* (J16) gmii1_txen.rgmii1_tctl */
+			PIN_MII1_RX_DV	(PIN_INPUT | MUX_MODE2)		/* (J17) gmii1_rxdv.rgmii1_rctl */
+			PIN_MII1_TX_CLK	(PIN_OUTPUT | MUX_MODE2)	/* (K18) gmii1_txclk.rgmii1_tclk */
+			PIN_MII1_RX_CLK	(PIN_INPUT | MUX_MODE2)		/* (L18) gmii1_rxclk.rgmii1_rclk */
+			PIN_MII1_TXD0	(PIN_OUTPUT | MUX_MODE2)	/* (K17) gmii1_txd0.rgmii1_td0 */
+			PIN_MII1_TXD1	(PIN_OUTPUT | MUX_MODE2)	/* (K16) gmii1_txd1.rgmii1_td1 */
+			PIN_MII1_TXD2	(PIN_OUTPUT | MUX_MODE2)	/* (K15) gmii1_txd2.rgmii1_td2 */
+			PIN_MII1_TXD3	(PIN_OUTPUT | MUX_MODE2)	/* (J18) gmii1_txd3.rgmii1_td3 */
+			PIN_MII1_RXD0	(PIN_INPUT | MUX_MODE2)		/* (M16) gmii1_rxd0.rgmii1_rd0 */
+			PIN_MII1_RXD1	(PIN_INPUT | MUX_MODE2)		/* (L15) gmii1_rxd1.rgmii1_rd1 */
+			PIN_MII1_RXD2	(PIN_INPUT | MUX_MODE2)		/* (L16) gmii1_rxd2.rgmii1_rd2 */
+			PIN_MII1_RXD3	(PIN_INPUT | MUX_MODE2)		/* (L17) gmii1_rxd3.rgmii1_rd3 */
+		>;
+	};
+
+	davinci_mdio_default: pinmux_davinci_mdio_default {
+		pinctrl-single,pins = <
+			PIN_MDIO	(MUX_MODE0 | PIN_INPUT_PULLUP)
+			PIN_MDC		(MUX_MODE0 | PIN_OUTPUT_PULLUP)
+		>;
+	};
+
+
+	mmc1_pins: pinmux_mmc1 {
+		pinctrl-single,pins = <
+			PIN_MMC0_DAT0	(PIN_INPUT | MUX_MODE0)		/* mmc0_dat0.mmc0_dat0 */
+			PIN_MMC0_DAT1	(PIN_INPUT | MUX_MODE0)		/* mmc0_dat1.mmc0_dat1 */
+			PIN_MMC0_DAT2	(PIN_INPUT | MUX_MODE0)		/* mmc0_dat2.mmc0_dat2 */
+			PIN_MMC0_DAT3	(PIN_INPUT | MUX_MODE0)		/* mmc0_dat3.mmc0_dat3 */
+			PIN_MMC0_CLK	(PIN_INPUT | MUX_MODE0)		/* mmc0_clk.mmc0_clk */
+			PIN_MMC0_CMD	(PIN_INPUT | MUX_MODE0)		/* mmc0_cmd.mmc0_cmd */
+		>;
+	};
+
+	mmc1_cd: pinmux_mmc1_cd {
+		pinctrl-single,pins = <
+			PIN_SPI0_CS1	(MUX_MODE7 | PIN_INPUT_PULLUP)	/* spi0_cs1.gpio0_6 */
+		>;
+	};
+};
+
+&uart0 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&uart0_pins>;
+	status = "okay";
+};
+
+&mac {
+	pinctrl-names = "default";
+	pinctrl-0 = <&cpsw_default>;
+	slaves = <1>;
+	active_slave = <0>;
+	status = "okay";
+};
+
+&davinci_mdio {
+	pinctrl-names = "default";
+	pinctrl-0 = <&davinci_mdio_default>;
+	max-speed = <100>;
+	status = "okay";
+
+	ethphy0: ethernet-phy@0 {
+		reg = <0>;
+	};
+};
+
+&cpsw_emac0 {
+	phy_id = <&davinci_mdio>, <0>;
+	phy-handle = <&ethphy0>;
+        phy-mode = "rgmii-id";
+};
+
+&mmc1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&mmc1_pins &mmc1_cd>;
+	vmmc-supply = <&vmmc_reg>;
+	bus-width = <4>;
+	cd-gpios = <&gpio0 6 GPIO_ACTIVE_HIGH>;
+	status = "okay";
+};
diff --git a/arch/arm/boot/dts/am335x-byteengine.dtsi b/arch/arm/boot/dts/am335x-byteengine.dtsi
new file mode 100644
index 000000000000..abfb55b0b3d5
--- /dev/null
+++ b/arch/arm/boot/dts/am335x-byteengine.dtsi
@@ -0,0 +1,179 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Copyright (C) 2020 bytesatwork AG - https://www.bytesatwork.io
+ */
+
+#include "am33xx.dtsi"
+#include <dt-bindings/pinctrl/am335x-names.h>
+
+/ {
+	model = "byteENGINE AM335x Rev4 (eMMC)";
+	compatible = "batw,am335x", "ti,am33xx";
+
+	cpus {
+		cpu@0 {
+			cpu0-supply = <&vdd1_reg>;
+		};
+	};
+
+	vbat: fixedregulator@0 {
+		compatible = "regulator-fixed";
+		regulator-name = "vbat";
+		regulator-min-microvolt = <5000000>;
+		regulator-max-microvolt = <5000000>;
+		regulator-boot-on;
+	};
+};
+
+&am33xx_pinmux {
+	i2c0_pins: pinmux_i2c0_pins {
+		pinctrl-single,pins = <
+			PIN_I2C0_SDA	(PIN_INPUT_PULLUP | MUX_MODE0)
+			PIN_I2C0_SCL	(PIN_INPUT_PULLUP | MUX_MODE0)
+		>;
+	};
+
+	emmc_pins: pinmux_emmc_pins {
+		pinctrl-single,pins = <
+			PIN_GPMC_CSN1	(PIN_INPUT_PULLUP | MUX_MODE2)	/* gpmc_csn1.mmc1_clk */
+			PIN_GPMC_CSN2	(PIN_INPUT_PULLUP | MUX_MODE2)	/* gpmc_csn2.mmc1_cmd */
+			PIN_GPMC_AD0	(PIN_INPUT_PULLUP | MUX_MODE1)	/* gpmc_ad0.mmc1_dat0 */
+			PIN_GPMC_AD1	(PIN_INPUT_PULLUP | MUX_MODE1)	/* gpmc_ad1.mmc1_dat1 */
+			PIN_GPMC_AD2	(PIN_INPUT_PULLUP | MUX_MODE1)	/* gpmc_ad2.mmc1_dat2 */
+			PIN_GPMC_AD3	(PIN_INPUT_PULLUP | MUX_MODE1)	/* gpmc_ad3.mmc1_dat3 */
+			PIN_GPMC_AD4	(PIN_INPUT_PULLUP | MUX_MODE1)	/* gpmc_ad4.mmc1_dat4 */
+			PIN_GPMC_AD5	(PIN_INPUT_PULLUP | MUX_MODE1)	/* gpmc_ad5.mmc1_dat5 */
+			PIN_GPMC_AD6	(PIN_INPUT_PULLUP | MUX_MODE1)	/* gpmc_ad6.mmc1_dat6 */
+			PIN_GPMC_AD7	(PIN_INPUT_PULLUP | MUX_MODE1)	/* gpmc_ad7.mmc1_dat7 */
+		>;
+	};
+
+	spi0_pins: spi0_pins {
+		pinctrl-single,pins = <
+			PIN_SPI0_SCLK	( PIN_INPUT | MUX_MODE0 )	/* (A17) spi0_sclk.spi0_sclk */
+			PIN_SPI0_D0	( PIN_INPUT | MUX_MODE0 )	/* (B17) spi0_d0.spi0_d0 */
+			PIN_SPI0_D1	( PIN_OUTPUT | MUX_MODE0 )	/* (B16) spi0_d1.spi0_d1 */
+			PIN_SPI0_CS0	( PIN_OUTPUT | MUX_MODE0 )	/* (A16) spi0_cs0.spi0_cs0 */
+		>;
+	};
+};
+
+&i2c0 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&i2c0_pins>;
+	clock-frequency = <100000>;
+	status = "okay";
+
+	tps: tps@2d {
+		reg = <0x2d>;
+	};
+
+	eeprom: eeprom@50 {
+		reg = <0x50>;
+	};
+};
+
+#include "tps65910.dtsi"
+
+&tps {
+	vcc1-supply = <&vbat>;
+	vcc2-supply = <&vbat>;
+	vcc3-supply = <&vbat>;
+	vcc4-supply = <&vbat>;
+	vcc5-supply = <&vbat>;
+	vcc6-supply = <&vbat>;
+	vcc7-supply = <&vbat>;
+	vccio-supply = <&vbat>;
+
+	regulators {
+		vrtc_reg: regulator@0 {
+			regulator-always-on;
+		};
+
+		vio_reg: regulator@1 {
+			regulator-always-on;
+		};
+
+		vdd1_reg: regulator@2 {
+			regulator-name = "vdd_mpu";
+			regulator-min-microvolt = <600000>;
+			regulator-max-microvolt = <1500000>;
+			regulator-boot-on;
+			regulator-always-on;
+		};
+
+		vdd2_reg: regulator@3 {
+			regulator-name = "vdd_core";
+			regulator-min-microvolt = <600000>;
+			regulator-max-microvolt = <1500000>;
+			regulator-boot-on;
+			regulator-always-on;
+		};
+
+		vdd3_reg: regulator@4 {
+			regulator-always-on;
+		};
+
+		vdig1_reg: regulator@5 {
+			regulator-always-on;
+		};
+
+		vdig2_reg: regulator@6 {
+			regulator-always-on;
+		};
+
+		vpll_reg: regulator@7 {
+			regulator-always-on;
+		};
+
+		vdac_reg: regulator@8 {
+			regulator-always-on;
+		};
+
+		vaux1_reg: regulator@9 {
+			regulator-always-on;
+		};
+
+		vaux2_reg: regulator@10 {
+			regulator-always-on;
+		};
+
+		vaux33_reg: regulator@11 {
+			regulator-always-on;
+		};
+
+		vmmc_reg: regulator@12 {
+			regulator-min-microvolt = <1800000>;
+			regulator-max-microvolt = <3300000>;
+			regulator-always-on;
+		};
+	};
+};
+
+&eeprom {
+	compatible = "at,24c256";
+	status = "okay";
+};
+
+&spi0 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&spi0_pins>;
+	status = "okay";
+
+	spinor: flash@0 {
+		#address-cells = <1>;
+		#size-cells = <1>;
+		compatible = "st,m25pe40", "jedec,spi-nor";
+		spi-max-frequency = <20000000>;
+		reg = <0>;
+	};
+};
+
+&mmc2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&emmc_pins>;
+	vmmc-supply = <&vmmc_reg>;
+	ti,non-removable;
+	bus-width = <8>;
+	status = "okay";
+};
-- 
2.20.1

